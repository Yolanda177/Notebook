(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{303:function(t,n,e){t.exports=e.p+"assets/img/7-16.4a980c73.png"},304:function(t,n,e){t.exports=e.p+"assets/img/7-17.8e7f6884.png"},305:function(t,n,e){t.exports=e.p+"assets/img/7-18.cec78d48.png"},306:function(t,n,e){t.exports=e.p+"assets/img/7-19.e25bfbaf.png"},307:function(t,n,e){t.exports=e.p+"assets/img/7-20.6bf7a260.png"},308:function(t,n,e){t.exports=e.p+"assets/img/7-2.7a1bca5a.png"},309:function(t,n,e){t.exports=e.p+"assets/img/7-22.11097efc.png"},310:function(t,n,e){t.exports=e.p+"assets/img/8-1.16497048.png"},311:function(t,n,e){t.exports=e.p+"assets/img/8-3.6463840c.png"},312:function(t,n,e){t.exports=e.p+"assets/img/8-4.2afda9d6.png"},313:function(t,n,e){t.exports=e.p+"assets/img/9-1.ea7327d1.png"},314:function(t,n,e){t.exports=e.p+"assets/img/9-2.3c51f58c.png"},315:function(t,n,e){t.exports=e.p+"assets/img/9-3.405d50db.png"},316:function(t,n,e){t.exports=e.p+"assets/img/9-4.ba83aeac.png"},317:function(t,n,e){t.exports=e.p+"assets/img/9-5.3d8c95fc.png"},318:function(t,n,e){t.exports=e.p+"assets/img/9-6.55f929ef.png"},319:function(t,n,e){t.exports=e.p+"assets/img/9-16.5ff1b2af.png"},320:function(t,n,e){t.exports=e.p+"assets/img/10-1.d8b3aff8.png"},321:function(t,n,e){t.exports=e.p+"assets/img/10-2.27388ea2.png"},322:function(t,n,e){t.exports=e.p+"assets/img/10-4-1.8d435d16.png"},323:function(t,n,e){t.exports=e.p+"assets/img/12-2.44dd1fcf.png"},324:function(t,n,e){t.exports=e.p+"assets/img/12-4.e217915c.png"},325:function(t,n,e){t.exports=e.p+"assets/img/12-5.5b02664d.png"},326:function(t,n,e){t.exports=e.p+"assets/img/12-8.f39e4bf8.png"},327:function(t,n,e){t.exports=e.p+"assets/img/12-10.c2444999.png"},328:function(t,n,e){t.exports=e.p+"assets/img/12-12.99c86ca1.png"},329:function(t,n,e){t.exports=e.p+"assets/img/12-13.758b11c6.png"},330:function(t,n,e){t.exports=e.p+"assets/img/12-14.b653b3df.png"},331:function(t,n,e){t.exports=e.p+"assets/img/12-15.0053f190.png"},332:function(t,n,e){t.exports=e.p+"assets/img/12-15-1.7a4a66f8.png"},333:function(t,n,e){t.exports=e.p+"assets/img/12-16.d142a755.png"},334:function(t,n,e){t.exports=e.p+"assets/img/12-17.0fbe94e5.png"},335:function(t,n,e){t.exports=e.p+"assets/img/12-17-1.1578d1e5.png"},336:function(t,n,e){t.exports=e.p+"assets/img/12-18.30017a90.png"},337:function(t,n,e){t.exports=e.p+"assets/img/13-1.47f4d7df.png"},338:function(t,n,e){t.exports=e.p+"assets/img/13-2.d7c5d37d.png"},339:function(t,n,e){t.exports=e.p+"assets/img/13-4.b2af2068.png"},340:function(t,n,e){t.exports=e.p+"assets/img/13-5.76577053.png"},341:function(t,n,e){t.exports=e.p+"assets/img/13-6.f8c6b0a4.png"},342:function(t,n,e){t.exports=e.p+"assets/img/13-7.164e9ec2.png"},343:function(t,n,e){t.exports=e.p+"assets/img/13-8.f106f6e1.png"},344:function(t,n,e){t.exports=e.p+"assets/img/13-9.db29ec99.png"},345:function(t,n,e){t.exports=e.p+"assets/img/13-10.5a1007e9.png"},346:function(t,n,e){t.exports=e.p+"assets/img/13-11.17c37081.png"},347:function(t,n,e){t.exports=e.p+"assets/img/14-1.35e1a2db.png"},348:function(t,n,e){t.exports=e.p+"assets/img/14-3.9d61b685.png"},349:function(t,n,e){t.exports=e.p+"assets/img/14-4.94e293f5.png"},350:function(t,n,e){t.exports=e.p+"assets/img/14-5.9e06b383.png"},351:function(t,n,e){t.exports=e.p+"assets/img/14-6.0e9ba435.png"},352:function(t,n,e){t.exports=e.p+"assets/img/15-8.d4a38fb5.png"},353:function(t,n,e){t.exports=e.p+"assets/img/15-9.0ec2ab73.png"},354:function(t,n,e){t.exports=e.p+"assets/img/15-11.5cb7dfe9.png"},355:function(t,n,e){t.exports=e.p+"assets/img/15-12.b29a26ea.png"},356:function(t,n,e){t.exports=e.p+"assets/img/16-2.ae0efad7.png"},357:function(t,n,e){t.exports=e.p+"assets/img/16-3.bb53b363.png"},358:function(t,n,e){t.exports=e.p+"assets/img/16-4.ef8500ff.png"},359:function(t,n,e){t.exports=e.p+"assets/img/16-5.8b95d06a.png"},360:function(t,n,e){t.exports=e.p+"assets/img/16-6.23272910.png"},361:function(t,n,e){t.exports=e.p+"assets/img/16-7.1ce788e6.png"},362:function(t,n,e){t.exports=e.p+"assets/img/16-8.da5c7787.png"},363:function(t,n,e){t.exports=e.p+"assets/img/16-9.f9703422.png"},364:function(t,n,e){t.exports=e.p+"assets/img/16-10.a08e1ab3.png"},365:function(t,n,e){t.exports=e.p+"assets/img/16-11.25ab9f42.png"},366:function(t,n,e){t.exports=e.p+"assets/img/16-12.d136f69e.png"},367:function(t,n,e){t.exports=e.p+"assets/img/16-13.8f1b05ed.png"},368:function(t,n,e){t.exports=e.p+"assets/img/16-14.166f2fcb.png"},369:function(t,n,e){t.exports=e.p+"assets/img/16-15.215ee929.png"},370:function(t,n,e){t.exports=e.p+"assets/img/16-16.de7c9c94.png"},371:function(t,n,e){t.exports=e.p+"assets/img/16-17.5d05c808.png"},372:function(t,n,e){t.exports=e.p+"assets/img/16-19.2e39c7c3.png"},373:function(t,n,e){t.exports=e.p+"assets/img/16-21.52f6e892.png"},374:function(t,n,e){t.exports=e.p+"assets/img/16-22.e77ab28d.png"},375:function(t,n,e){t.exports=e.p+"assets/img/16-23.f945e4fc.png"},376:function(t,n,e){t.exports=e.p+"assets/img/16-28.67cf5c41.png"},377:function(t,n,e){t.exports=e.p+"assets/img/17-3.da9fdf78.png"},378:function(t,n,e){t.exports=e.p+"assets/img/17-4.10ba377e.png"},379:function(t,n,e){t.exports=e.p+"assets/img/17-6.e9bebcf6.png"},380:function(t,n,e){t.exports=e.p+"assets/img/17-8.f179fa94.png"},381:function(t,n,e){t.exports=e.p+"assets/img/17-2.c2d115fc.png"},382:function(t,n,e){t.exports=e.p+"assets/img/17-9.26976608.png"},383:function(t,n,e){t.exports=e.p+"assets/img/17-12.601e02c0.png"},384:function(t,n,e){t.exports=e.p+"assets/img/17-14.f39633f3.png"},385:function(t,n,e){t.exports=e.p+"assets/img/17-15.ddd0881b.png"},386:function(t,n,e){t.exports=e.p+"assets/img/17-16.505895f1.png"},387:function(t,n,e){t.exports=e.p+"assets/img/18-1.f7a9212b.png"},388:function(t,n,e){t.exports=e.p+"assets/img/18-3.be2458f3.png"},532:function(t,n,e){"use strict";e.r(n);var a=e(38),s=Object(a.a)({},function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"c"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#c","aria-hidden":"true"}},[t._v("#")]),t._v(" C#")]),t._v(" "),a("h2",{attrs:{id:"七-类和集成"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#七-类和集成","aria-hidden":"true"}},[t._v("#")]),t._v(" 七.类和集成")]),t._v(" "),a("h3",{attrs:{id:"使用基类的引用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用基类的引用","aria-hidden":"true"}},[t._v("#")]),t._v(" 使用基类的引用")]),t._v(" "),a("p",[t._v("派生类的实例由基类的实例加上派生类新增的成员组成。可以通过"),a("strong",[t._v("类型转换符")]),t._v("和"),a("strong",[t._v("派生类对象的引用")]),t._v("获得基类部分的引用：")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    class MyBaseClass\n    {\n        public void Print()\n        {\n            Console.WriteLine("This is the base class");\n        }\n    }\n    class MyDerivedClass: MyBaseClass\n    {\n        new public void Print() // 使用 new 修饰符 告诉编译器需要屏蔽基类的同名方法\n        {\n            Console.WriteLine("This is the dervied class");\n        }\n    }\n        class Program\n    {\n        static void Main(string[] args)\n        {\n             MyDerivedClass dervied = new MyDerivedClass();\n             MyBaseClass mybc = (MyBaseClass)dervied;\n             dervied.Print(); // This is the base class\n             mybc.Print(); // This is the dervied class\n        }\n    }\n')])])]),a("p",[a("strong",[t._v("虚方法")]),t._v("：使用基类的引用可以访问到派生类的成员")]),t._v(" "),a("ul",[a("li",[t._v("方法具有相同的签名和返回类型，可访问性也需要一致")]),t._v(" "),a("li",[t._v("基类方法用 "),a("code",[t._v("virtual")]),t._v(" 标注")]),t._v(" "),a("li",[t._v("派生类方法用 "),a("code",[t._v("override")]),t._v(" 标注")]),t._v(" "),a("li",[t._v("不能复写 "),a("code",[t._v("static")]),t._v(" 方法或非虚方法")]),t._v(" "),a("li",[t._v("方法、属性和索引器都可以被声明为"),a("code",[t._v("virtual")]),t._v("和"),a("code",[t._v("override")])])]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    class MyBaseClass\n    {\n        virtual public void Print()\n        {\n            Console.WriteLine("This is the base class");\n        }\n    }\n    class MyDerivedClass: MyBaseClass\n    {\n        override public void Print()\n        {\n            Console.WriteLine("This is the dervied class");\n        }\n    }\n    class Program\n    {\n        static void Main(string[] args)\n        {\n             MyDerivedClass dervied = new MyDerivedClass();\n             MyBaseClass mybc = (MyBaseClass)dervied;\n             dervied.Print(); // This is the dervied class\n             mybc.Print(); // This is the dervied class\n        }\n    }\n')])])]),a("p",[t._v("注意：无论继承的层次有多少，如果使用基类部分的引用去调用一个覆写方法时，会根据派生层往上寻找，直到找到最高派生层对应被标记的"),a("code",[t._v("override")]),t._v("方法")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    class MyBaseClass\n    {\n        virtual public void Print()\n        {\n            Console.WriteLine("This is the base class");\n        }\n    }\n    class MyDerivedClass: MyBaseClass\n    {\n        override public void Print()\n        {\n            Console.WriteLine("This is the dervied class");\n        }\n    }\n    class SecondDerived: MyDerivedClass\n    {\n        override public void Print()\n        // new public void Print() // 如果此处用的是 new，则下面 Main 中第二个应打印 This is the dervied class\n        {\n            Console.WriteLine("This is the second deroved class");\n        }\n    }\n    class Program\n    {\n        static void Main(string[] args)\n        {\n             SecondDerived dervied = new SecondDerived();\n             MyBaseClass mybc = (MyBaseClass)dervied;\n             dervied.Print(); // This is the second deroved class\n             mybc.Print(); // This is the second deroved class\n        }\n    }\n')])])]),a("h3",{attrs:{id:"构造函数的执行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构造函数的执行","aria-hidden":"true"}},[t._v("#")]),t._v(" 构造函数的执行")]),t._v(" "),a("p",[t._v("创造一个派生类的实例过程：初始化对象的所有实例成员——>调用基类无参数构造函数——>执行自己的构造函数体")]),t._v(" "),a("p",[t._v("因为构造函数可以重载，如果希望派生类使用一个指定的构造函数而不是无参数的构造函数，需要在"),a("em",[t._v("构造函数初始化语句")]),t._v("中指定：（两种形式）")]),t._v(" "),a("ul",[a("li",[t._v("第一种：使用关键字"),a("code",[t._v("base")]),t._v("指明希望使用的基类构造函数（即指定执行继承类的哪一个构造函数）")]),t._v(" "),a("li",[t._v("第二种：使用关键字"),a("code",[t._v("this")]),t._v("指明应该使用当前类的哪一个构造函数（即指定先执行当前类的哪一个构造函数）")])]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('      // 类 MyBaseClass 的构造函数\n      public MyBaseClass(string s, int x)\n      {\n          // 执行代码\n      }\n      // 类 MyDerivedClass 的构造函数\n      public MyDerivedClass(int x, string s): base(s, x)\n      {\n          // 执行代码\n      }\n      // 第二种方式\n  class MyBaseClass\n  {\n      public MyBaseClass()\n      {\n          Console.WriteLine("this is MyBaseClass constructor");\n      }\n  }\n  class MyDerivedClass: MyBaseClass\n  {\n      readonly int firstVar;\n      readonly double secondVar;\n      public string UserName;\n      private MyDerivedClass()\n      {\n          firstVar = 20;\n          secondVar = 30.5;\n          Console.WriteLine("this is first constructor");\n      }\n      public MyDerivedClass(string firstName): this()\n      {\n          UserName = firstName;\n          UserIdNumber = -1;\n          Console.WriteLine("this is second constructor");\n      }\n  }\n  // Main\n  MyDerivedClass dervied = new MyDerivedClass("test");\n  // 打印\n  // this is MyBaseClass constructor\n  // this is first constructor\n  // this is second constructor\n')])])]),a("p",[a("strong",[t._v("类的可访问级别")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("public：可以被系统内任何程序集中的代码访问")]),t._v(" "),a("li",[t._v("internal：只能被自己所在的程序集内的类访问（默认的访问级别）")])]),t._v(" "),a("h3",{attrs:{id:"程序集间的继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#程序集间的继承","aria-hidden":"true"}},[t._v("#")]),t._v(" 程序集间的继承")]),t._v(" "),a("p",[t._v("C# 允许在不同的程序集内定义的基类来派生类：也就是只要 A程序集的一个基类显示声明 "),a("code",[t._v("public")]),t._v(",当在VS添加对包含基类的程序集的引用时，就能够在 B程序集内继承 A程序集的类")]),t._v(" "),a("p",[t._v("如果要引用其他程序集中的类和类型，可以在文件顶部放置一个"),a("code",[t._v("using")]),t._v("指令，并带上将要访问的类或类型所在的命名空间")]),t._v(" "),a("p",[a("strong",[t._v("注意")]),t._v("，添加引用和增加"),a("code",[t._v("using")]),t._v("指令是两回事，添加引用时告诉编译器所需的类型在哪里定义；增加"),a("code",[t._v("using")]),t._v("指令时允许引用其他的类而不必使用它们的完全限定名称")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('// ClassDemo 程序集（项目）\nnamespace ClassDemo.BaseClassNS\n{\n    public class BaseClass\n    {\n        public void PrintMe()\n        {\n            Console.WriteLine("I am BaseClass");\n        }\n    }\n}\n// HelloWorld 程序集（项目）\nusing ClassDemo.BaseClassNS;\n\nnamespace HelloWorld\n{\n    class DerivedClass: BaseClass\n    {\n    }\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            DerivedClass mdc = new DerivedClass();\n            mdc.PrintMe(); // I am BaseClass\n        }\n    }\n}\n')])])]),a("h3",{attrs:{id:"成员访问修饰符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#成员访问修饰符","aria-hidden":"true"}},[t._v("#")]),t._v(" 成员访问修饰符")]),t._v(" "),a("p",[t._v("通用内容:")]),t._v(" "),a("ul",[a("li",[t._v("所有在同一类中显示声明的成员，在同一类中都是可见的，无论访问性如何")]),t._v(" "),a("li",[t._v("继承的成员不在类的声明中显式声明，所以继承的成员对派生类的成员既可以是可见的，也可以是不可见的")]),t._v(" "),a("li",[t._v("五种访问级别：public、private、protected、internal、protected internal")]),t._v(" "),a("li",[t._v("必须对每个成员指定访问级别，不指定默认为private")]),t._v(" "),a("li",[t._v("成员不能比所在类有更高的访问性，如果类仅限于所在的程序集访问，则它成员也不能从程序集外部访问\n"),a("img",{attrs:{src:e(303),alt:""}}),t._v(" "),a("img",{attrs:{src:e(304),alt:""}}),t._v(" "),a("img",{attrs:{src:e(305),alt:""}}),t._v(" "),a("img",{attrs:{src:e(306),alt:""}}),t._v(" "),a("img",{attrs:{src:e(307),alt:""}})])]),t._v(" "),a("p",[a("strong",[t._v("总结")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("private：只在类的内部可访问")]),t._v(" "),a("li",[t._v("internal：对该程序集内的所有类可访问")]),t._v(" "),a("li",[t._v("protected：对所有继承该类的类可访问")]),t._v(" "),a("li",[t._v("protected internal：对所有继承该类或在该程序集内声明的类可访问")]),t._v(" "),a("li",[t._v("public：对任何类可访问")])]),t._v(" "),a("p",[a("img",{attrs:{src:e(308),alt:""}})]),t._v(" "),a("h3",{attrs:{id:"抽象成员"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#抽象成员","aria-hidden":"true"}},[t._v("#")]),t._v(" 抽象成员")]),t._v(" "),a("p",[a("strong",[t._v("抽象成员")]),t._v("是指设计为被覆写的函数成员：")]),t._v(" "),a("ul",[a("li",[t._v("必须是函数成员，即方法、属性、事件、索引（字段和常量不能是抽象成员）")]),t._v(" "),a("li",[t._v("必须用 "),a("code",[t._v("abstract")]),t._v("修饰符标记")]),t._v(" "),a("li",[t._v("不能有实现代码")]),t._v(" "),a("li",[t._v("只能在抽象类中声明")]),t._v(" "),a("li",[t._v("抽象成员在派生类中必须被覆写，但"),a("code",[t._v("virtual")]),t._v("修饰符不能附加到"),a("code",[t._v("abstract")]),t._v("上")]),t._v(" "),a("li",[t._v("类似虚成员，派生类中的抽象成员实现必须指定"),a("code",[t._v("override")]),t._v("修饰符")])]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    abstract class Example2\n    {\n        abstract public void PrintStuff(string s);\n        abstract public int MyProperty\n        {\n            get;\n            set;\n        }\n    }\n")])])]),a("p",[a("strong",[t._v("抽象类")]),t._v("是指设计为被继承的类：")]),t._v(" "),a("ul",[a("li",[t._v("抽象类只能用作其他类的基类，不能创建实例")]),t._v(" "),a("li",[t._v("使用"),a("code",[t._v("abstract")]),t._v("修饰符声明")]),t._v(" "),a("li",[t._v("抽象类的成员可以包含普通成员和抽象成员")]),t._v(" "),a("li",[t._v("抽象类可以派生自另外一个抽象类")]),t._v(" "),a("li",[t._v("任何派生自抽象类的类必须使用"),a("code",[t._v("override")]),t._v("关键字实现该类的所有抽象成员，除非派生类自己也是抽象类")])]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    abstract class AbClass\n    {\n        abstract public void PrintStuff(string s);\n        public void IdentifyBase() \n        {\n            Console.WriteLine("I am AbClass");\n        }\n    }\n    class MyAbClass: AbClass\n    {\n        override public void PrintStuff(string s)\n        {\n            Console.WriteLine("{0}", s);\n        }\n    }\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            MyAbClass mab = new MyAbClass();\n            mab.PrintStuff("test"); // test 调用抽象方法\n            mab.IdentifyBase(); // I am AbClass 调用继承的方法\n        }\n    }\n')])])]),a("h3",{attrs:{id:"密封类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#密封类","aria-hidden":"true"}},[t._v("#")]),t._v(" 密封类")]),t._v(" "),a("p",[a("strong",[t._v("密封类")]),t._v("刚好与抽象类相反")]),t._v(" "),a("ul",[a("li",[t._v("只能被用作独立的类，不能用作基类")]),t._v(" "),a("li",[t._v("使用"),a("code",[t._v("sealed")]),t._v("修饰符标注")])]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    sealed class MyClass \n    {\n        // \n    }\n")])])]),a("h3",{attrs:{id:"静态类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#静态类","aria-hidden":"true"}},[t._v("#")]),t._v(" 静态类")]),t._v(" "),a("p",[a("strong",[t._v("静态类")]),t._v("中的所有成员都是静态的，用于存放不受实例数据影响的数据和函数，常见的用途是创建一个包含一组数学方法和值的数学库")]),t._v(" "),a("ul",[a("li",[t._v("使用"),a("code",[t._v("static")]),t._v("修饰符标注")]),t._v(" "),a("li",[t._v("所有成员都是静态的")]),t._v(" "),a("li",[t._v("类可以有一个静态构造函数，但不能有实例构造函数，不能创建该类的实例")]),t._v(" "),a("li",[t._v("静态类是隐式密封的，所以不能继承静态类")]),t._v(" "),a("li",[t._v("使用类名和成员名访问")])]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    static class MyMath\n    {\n        public static float PI = 3.14f;\n        public static bool IsOdd(int x)\n        {\n            return x % 2 == 1;\n        }\n        public static  int Times2(int x)\n        {\n            return 2 * x;\n        }\n    }\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            int val = 3;\n            Console.WriteLine("{0} is Odd is {1}", val, MyMath.IsOdd(val));\n            Console.WriteLine("{0} * 2 = {1}", val, MyMath.Times2(val));\n        }\n    }\n')])])]),a("h3",{attrs:{id:"扩展方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#扩展方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 扩展方法")]),t._v(" "),a("p",[a("strong",[t._v("扩展方法")]),t._v("允许编写的方法和声明它的类之外的类关联")]),t._v(" "),a("ul",[a("li",[t._v("声明扩展方法的类必须声明为"),a("code",[t._v("static")])]),t._v(" "),a("li",[t._v("扩展方法本身必须声明为"),a("code",[t._v("static")])]),t._v(" "),a("li",[t._v("扩展方法必须包含关键字"),a("code",[t._v("this")]),t._v("作为它的第一个参数类型，并在后面跟着它所扩展的类的名称")])]),t._v(" "),a("p",[a("img",{attrs:{src:e(309),alt:""}})]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('sealed class MyData\n    {\n        private double D1;\n        private double D2;\n        private double D3;\n        public MyData(double d1, double d2, double d3)\n        {\n            D1 = d1;\n            D2 = d2;\n            D3 = d3;\n        }\n        public double Sum()\n        {\n            return D1 + D2 + D3;\n        }\n    }\n    static class ExtendMyData\n    {\n        public static double Average(this MyData md)\n        {\n            return md.Sum()/3;\n        }\n    }\n    class Program\n    {\n        static void Main(string[] args)\n        {\n \n            MyData md = new MyData(3, 4, 5);\n            Console.WriteLine("Average: {0}", ExtendMyData.Average(md)); // 静态调用形式\n            Console.WriteLine("Average: {0}", md.Average()); // 当作类的实例成员调用 等价于上一行\n        }\n    }\n')])])]),a("h2",{attrs:{id:"八-表达式和运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#八-表达式和运算符","aria-hidden":"true"}},[t._v("#")]),t._v(" 八.表达式和运算符")]),t._v(" "),a("h3",{attrs:{id:"表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#表达式","aria-hidden":"true"}},[t._v("#")]),t._v(" 表达式")]),t._v(" "),a("p",[a("strong",[t._v("运算符")]),t._v("是一个符号，表示返回单个结果的操作")]),t._v(" "),a("p",[a("strong",[t._v("操作数")]),t._v("是指作为运算符输入的数据元素，有：")]),t._v(" "),a("ul",[a("li",[t._v("字面量")]),t._v(" "),a("li",[t._v("常量")]),t._v(" "),a("li",[t._v("变量")]),t._v(" "),a("li",[t._v("方法调用")]),t._v(" "),a("li",[t._v("元素访问器")]),t._v(" "),a("li",[t._v("其他表达式")])]),t._v(" "),a("p",[a("strong",[t._v("表达式")]),t._v("是运算符和操作数的字符串")]),t._v(" "),a("h3",{attrs:{id:"字面量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字面量","aria-hidden":"true"}},[t._v("#")]),t._v(" 字面量")]),t._v(" "),a("p",[a("strong",[t._v("字面量")]),t._v("是源代码中键入的数字或字符串，表示一个指定类型的明确的、固定的值")]),t._v(" "),a("p",[t._v("eg:")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    static void Main() {\n        Console.WriteLine("{0}", 1024); // 整数字面量\n        Console.WriteLine("{0}", 3.1416); // 双精度字面量\n        Console.WriteLine("{0}", 3.1416F); // 浮点型字面量\n        Console.WriteLine("{0}", true); // 布尔型字面量\n        Console.WriteLine("{0}", \'x\'); // 字符型字面量\n        Console.WriteLine("{0}", \'Hi there\'); // 字符串型字面量\n    }\n')])])]),a("p",[a("strong",[t._v("整数字面量")]),t._v("最常用的字面量，没有小数点，带可选的后缀，指明整数类型\n"),a("img",{attrs:{src:e(310),alt:""}})]),t._v(" "),a("p",[a("strong",[t._v("实数字面量")]),t._v("组成：")]),t._v(" "),a("ul",[a("li",[t._v("十进制数字")]),t._v(" "),a("li",[t._v("一个可选的小数点")]),t._v(" "),a("li",[t._v("一个可选的指数部分")]),t._v(" "),a("li",[t._v("一个可选的后缀")])]),t._v(" "),a("p",[t._v("eg:")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    float f1 = 236F;\n    dpuble d1 = 236.714;\n    double d2 = .35192;\n    double d3 = 6.338e-26;\n")])])]),a("p",[a("strong",[t._v("字符字面量")]),t._v("由两个单引号内的字符组成，类型为"),a("code",[t._v("char")]),t._v("，可以是")]),t._v(" "),a("ul",[a("li",[t._v("单个字符")]),t._v(" "),a("li",[t._v("一个简单转义序列")]),t._v(" "),a("li",[t._v("一个十六进制转义序列")]),t._v(" "),a("li",[t._v("一个"),a("code",[t._v("Unicode")]),t._v("转义序列")])]),t._v(" "),a("p",[t._v("eg:")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    char c1 = 'd'; // 单个字符\n    char c2 = '\\n'; // 简单转移序列\n    char c3 = '\\x0061'; // 十六进制转义序列\n    char c4 = '\\u005a'; // Unicode转义序列\n")])])]),a("p",[a("img",{attrs:{src:e(311),alt:""}})]),t._v(" "),a("p",[a("strong",[t._v("字符串字面量")]),t._v("由双引号标记，分为两种：")]),t._v(" "),a("ul",[a("li",[t._v("常规字符串字面量")]),t._v(" "),a("li",[t._v("逐字字符串字面量：以"),a("code",[t._v("@")]),t._v("字符为前缀，双引号内的转义字符串不会被求值")])]),t._v(" "),a("p",[t._v("eg：")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    string rst1 = "Hi there!"; // Hi there!\n    string vst1 = @"Hi there!"; // Hi there!\n\n    string rst2 = "Value 1 \\t 5, Val2 \\t 10"; // Value 1     5, Val2     10 解释制表符转义字符串\n    string vst2 = @"Value 1 \\t 5, Val2 \\t 10"; // Value 1 \\t 5, Val2 \\t 10 不解释制表符\n')])])]),a("h3",{attrs:{id:"求值顺序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#求值顺序","aria-hidden":"true"}},[t._v("#")]),t._v(" 求值顺序")]),t._v(" "),a("p",[a("strong",[t._v("运算符优先级")]),t._v(" "),a("img",{attrs:{src:e(312),alt:""}})]),t._v(" "),a("p",[a("strong",[t._v("运算符结合性")]),t._v("：当两个连续的运算符有相同的优先级时，根据操作结合性判断优先级：")]),t._v(" "),a("ul",[a("li",[t._v("左结合运算符从左至右求值")]),t._v(" "),a("li",[t._v("右结合运算符从右至左求值")]),t._v(" "),a("li",[t._v("除赋值运算符以外，其他"),a("em",[t._v("二元运算符都是左结合")])]),t._v(" "),a("li",[a("em",[t._v("赋值运算符和条件运算符都是右结合")])])]),t._v(" "),a("p",[t._v("此外可以用"),a("strong",[t._v("圆括号")]),t._v("显式设定子表达式的求值顺序，从嵌套的最内层到最外层顺序")]),t._v(" "),a("h3",{attrs:{id:"简单算术运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简单算术运算符","aria-hidden":"true"}},[t._v("#")]),t._v(" 简单算术运算符")]),t._v(" "),a("p",[a("strong",[t._v("简单算术运算符")]),t._v("执行基本的四则运算（加减乘除），都是二元"),a("em",[t._v("左结合")]),t._v("运算符")]),t._v(" "),a("h3",{attrs:{id:"求余运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#求余运算符","aria-hidden":"true"}},[t._v("#")]),t._v(" 求余运算符")]),t._v(" "),a("p",[a("strong",[t._v("求余运算符")]),t._v("(%)是用第二个操作数除第一个操作数，忽略商，返回余数，是二元"),a("em",[t._v("左结合")]),t._v("运算符")]),t._v(" "),a("p",[t._v("eg：")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    0 % 3 = 0; // 0除以3得0余0\n    1 % 3 = 1; // 1除以3得0余1\n    2 % 3 = 2; // 2除以3得0余2\n    3 % 3 = 0; // 3除以3得1余0\n    4 % 3 = 1; // 4除以3得1余1 \n")])])]),a("h3",{attrs:{id:"关系比较运算符和相等比较运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关系比较运算符和相等比较运算符","aria-hidden":"true"}},[t._v("#")]),t._v(" 关系比较运算符和相等比较运算符")]),t._v(" "),a("p",[a("strong",[t._v("关系比较运算符")]),t._v("和"),a("strong",[t._v("相等比较运算符")]),t._v("都是二元"),a("em",[t._v("左结合")]),t._v("运算符：")]),t._v(" "),a("ul",[a("li",[t._v("小于：<")]),t._v(" "),a("li",[t._v("大于：>")]),t._v(" "),a("li",[t._v("小于等于：<=")]),t._v(" "),a("li",[t._v("大于等于：>=")]),t._v(" "),a("li",[t._v("等于：=")]),t._v(" "),a("li",[t._v("不等于：!=")])]),t._v(" "),a("p",[a("strong",[t._v("引用类型比较")]),t._v("，只比较它们的"),a("em",[t._v("引用")]),t._v(":")]),t._v(" "),a("ul",[a("li",[t._v("引用相等，也就是说指向内存相同对象，则相等性比较为"),a("code",[t._v("true")]),t._v(",否则为"),a("code",[t._v("false")])]),t._v(" "),a("li",[t._v("是一种浅比较")])]),t._v(" "),a("p",[t._v("注意，"),a("code",[t._v("string")]),t._v("类型对象也是引用类型，但它的比较方式不同于上述，它们比较的是长度和内容（区分大小写），是一种深比较；"),a("em",[t._v("委托")]),t._v("也是引用类型，使用的是深比较")]),t._v(" "),a("h3",{attrs:{id:"递增运算符和递减运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#递增运算符和递减运算符","aria-hidden":"true"}},[t._v("#")]),t._v(" 递增运算符和递减运算符")]),t._v(" "),a("p",[a("strong",[t._v("递增运算符")]),t._v("和"),a("strong",[t._v("递减运算符")]),t._v("都是二元"),a("em",[t._v("左结合")]),t._v("运算符，分别对操作数加1、减1：")]),t._v(" "),a("ul",[a("li",[t._v("前置形式：++x或--y")]),t._v(" "),a("li",[t._v("后置形式：x++或y--")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("表达式：x=10")]),t._v(" "),a("th",[t._v("返回表达式的值")]),t._v(" "),a("th",[t._v("计算后变量的值")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("++x")]),t._v(" "),a("td",[t._v("11")]),t._v(" "),a("td",[t._v("11")])]),t._v(" "),a("tr",[a("td",[t._v("x++")]),t._v(" "),a("td",[t._v("10")]),t._v(" "),a("td",[t._v("11")])]),t._v(" "),a("tr",[a("td",[t._v("--x")]),t._v(" "),a("td",[t._v("9")]),t._v(" "),a("td",[t._v("9")])]),t._v(" "),a("tr",[a("td",[t._v("x--")]),t._v(" "),a("td",[t._v("10")]),t._v(" "),a("td",[t._v("9")])])])]),t._v(" "),a("h3",{attrs:{id:"条件逻辑运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#条件逻辑运算符","aria-hidden":"true"}},[t._v("#")]),t._v(" 条件逻辑运算符")]),t._v(" "),a("p",[a("strong",[t._v("逻辑运算符")]),t._v("用于比较或否定它们的操作数的逻辑值：")]),t._v(" "),a("ul",[a("li",[t._v("逻辑与(&&)和逻辑或(||)是二元"),a("em",[t._v("左结合")]),t._v("运算符，逻辑非(!)是一元运算符")]),t._v(" "),a("li",[t._v("逻辑与(&&)和逻辑或(||)使用"),a("em",[t._v("短路")]),t._v("模式，如果前一个表达式为"),a("code",[t._v("false")]),t._v("则不会执行后一个表达式")])]),t._v(" "),a("h3",{attrs:{id:"逻辑运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#逻辑运算符","aria-hidden":"true"}},[t._v("#")]),t._v(" 逻辑运算符")]),t._v(" "),a("p",[a("strong",[t._v("按位逻辑运算符")]),t._v("用于设置位组的方法参数，除了"),a("em",[t._v("按非")]),t._v("是一元运算符外，其他都是二元"),a("em",[t._v("左结合")]),t._v("运算符")]),t._v(" "),a("h3",{attrs:{id:"移位运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#移位运算符","aria-hidden":"true"}},[t._v("#")]),t._v(" 移位运算符")]),t._v(" "),a("p",[a("strong",[t._v("按位移位运算符")]),t._v("是指向左或向右把位组移动指定数量个位置，空出的位用0或1填充，都是二元"),a("em",[t._v("左结合")]),t._v("运算符")]),t._v(" "),a("h3",{attrs:{id:"赋值运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#赋值运算符","aria-hidden":"true"}},[t._v("#")]),t._v(" 赋值运算符")]),t._v(" "),a("p",[a("strong",[t._v("赋值运算符")]),t._v("是二元"),a("em",[t._v("右结合")]),t._v("运算符")]),t._v(" "),a("h3",{attrs:{id:"条件运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#条件运算符","aria-hidden":"true"}},[t._v("#")]),t._v(" 条件运算符")]),t._v(" "),a("p",[a("strong",[t._v("条件运算符")]),t._v("是基于条件的结果，返回两个值之一的三元运算符")]),t._v(" "),a("h3",{attrs:{id:"一元算术运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一元算术运算符","aria-hidden":"true"}},[t._v("#")]),t._v(" 一元算术运算符")]),t._v(" "),a("p",[a("strong",[t._v("一元算术运算符")]),t._v("设置数字值的符号")]),t._v(" "),a("h3",{attrs:{id:"用户定义运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用户定义运算符","aria-hidden":"true"}},[t._v("#")]),t._v(" 用户定义运算符")]),t._v(" "),a("p",[a("strong",[t._v("用户定义的类型转换")]),t._v("可以为自己的类或结构定义隐式转换和显式转换，即可将用户定义类型的对象转换成某个其他类型：")]),t._v(" "),a("ul",[a("li",[t._v("隐式转换：当决定载特定的上下文中使用特定类型时，如有必要，编译器会自动执行转换，使用"),a("code",[t._v("implicit")]),t._v("关键字")]),t._v(" "),a("li",[t._v("显式转换：编译器只在使用显式转换运算符时才执行转换，使用"),a("code",[t._v("explicit")]),t._v("关键字")])]),t._v(" "),a("p",[a("strong",[t._v("显式转换")]),t._v("，需要在转换时用上"),a("em",[t._v("强制转化运算符")]),t._v("，由一对圆括号加上目标类型组成")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    class LimitedInt\n    {\n        const int MaxValue = 100;\n        public int MinValue = 0;\n        public static implicit operator int(LimitedInt li)\n        {\n            Console.WriteLine("1");\n            return li.TheValue;\n        }\n        public static explicit operator LimitedInt(int x)\n        {\n            Console.WriteLine("2");\n            LimitedInt li = new LimitedInt();\n            li.TheValue = x;\n            return li;\n        }\n        private int _theValue = 0;\n        public int TheValue\n        {\n            get {\n                Console.WriteLine("get");\n                return _theValue;\n            }\n            set\n            {\n                if (value < MinValue)\n                {\n                    _theValue = 0;\n                } else\n                {\n                    Console.WriteLine("set");\n                    _theValue = value > MaxValue ? MaxValue : value;\n                }\n            }\n        }\n        class Program {\n            static void Main() {\n                Limited li = 500; // 隐式转换\n                int value = (int) li; // 显式转换\n            }\n        }\n        // 执行顺序为\n        // 2 set 1 get get li: 100, value: 100\n    }\n')])])]),a("h3",{attrs:{id:"运算符重载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运算符重载","aria-hidden":"true"}},[t._v("#")]),t._v(" 运算符重载")]),t._v(" "),a("p",[a("strong",[t._v("运算符重载")]),t._v("允许用户定义C#运算符如何操作自定义类型的操作数：")]),t._v(" "),a("ul",[a("li",[t._v("运算符重载只能用于类和结构")]),t._v(" "),a("li",[t._v("为类或结构重载一个运算符x，可以声明一个名称为"),a("code",[t._v("operator x")]),t._v("的方法并实现它的行为")]),t._v(" "),a("li",[t._v("一元运算符的重载方法带一个单独的"),a("code",[t._v("class")]),t._v("或"),a("code",[t._v("struct")]),t._v("类型的参数")]),t._v(" "),a("li",[t._v("二元运算符的重载方法带两个参数，至少有一个必须是"),a("code",[t._v("class")]),t._v("或"),a("code",[t._v("struct")]),t._v("类型")]),t._v(" "),a("li",[t._v("声明时必须同时使用"),a("code",[t._v("public")]),t._v("和"),a("code",[t._v("static")]),t._v("修饰符")]),t._v(" "),a("li",[t._v("运算符必须是操作类或结构的成员")])]),t._v(" "),a("p",[t._v("eg:")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    class LimitedIntOverLoad\n    {\n        const int MaxValue = 100;\n        const int MinValue = 0;\n        public static LimitedIntOverLoad operator -(LimitedIntOverLoad x)\n        {\n            Console.WriteLine("1");\n            LimitedIntOverLoad li = new LimitedIntOverLoad();\n            li.TheValue = 0;\n            return li;\n        }\n        public static LimitedIntOverLoad operator -(LimitedIntOverLoad x, LimitedIntOverLoad y)\n        {\n            Console.WriteLine("2");\n            LimitedIntOverLoad li = new LimitedIntOverLoad();\n            li.TheValue = x.TheValue - y.TheValue;\n            return li;\n        }\n        public static LimitedIntOverLoad operator +(LimitedIntOverLoad x, double y)\n        {\n            Console.WriteLine("3");\n            LimitedIntOverLoad li = new LimitedIntOverLoad();\n            li.TheValue = x.TheValue + (int)y;\n            return li;\n        }\n        private int _theValue = 0;\n        public int TheValue\n        {\n            get\n            {\n                Console.WriteLine("get");\n                return _theValue;\n            }\n            set\n            {\n                if (value < MinValue)\n                {\n                    _theValue = 0;\n                }\n                else\n                {\n                    Console.WriteLine("set");\n                    _theValue = value > MaxValue ? MaxValue : value;\n                }\n            }\n        }\n    }\n    class Program () {\n        static void Main() {\n            LimitedIntOverLoad li1 = new LimitedIntOverLoad();\n            LimitedIntOverLoad li2 = new LimitedIntOverLoad();\n            LimitedIntOverLoad li3 = new LimitedIntOverLoad();\n            li1.TheValue = 10;\n            li2.TheValue = 26;\n            Console.WriteLine("li1:{0}, li2: {1}", li1.TheValue, li2.TheValue); // 10 , 26\n            li3 = -li1;\n            Console.WriteLine("-{0} = {1}", li1.TheValue, li3.TheValue); // -10 = 0\n            li3 = li2 - li1;\n            Console.WriteLine("{0} - {1} = {2}", li2.TheValue, li1.TheValue, li3.TheValue); // 26 - 10 = 16\n            li3 = li1 - li2;\n            Console.WriteLine("{0} - {1} = {2}", li1.TheValue, li2.TheValue, li3.TheValue); // 10 - 26 = 0\n        }\n    }\n')])])]),a("p",[t._v("注意。并不是所有运算符都能够重载，只有以下几种才可以：")]),t._v(" "),a("ul",[a("li",[t._v("一元运算符：+、-、!、~、++、--、true、false")]),t._v(" "),a("li",[t._v("二元运算符：+、-、*、/、%、&、|、^、<<、>>、== 、!==、<、>、<=、>=")]),t._v(" "),a("li",[t._v("递增和递减运算符也能重载，但无后置前置之分")])]),t._v(" "),a("p",[a("strong",[t._v("重载运算符不能做的事情")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("创建新得运算符")]),t._v(" "),a("li",[t._v("改变运算符的语法")]),t._v(" "),a("li",[t._v("重新定义运算符如何处理预定义类型")]),t._v(" "),a("li",[t._v("改变运算符的优先级或结合性")])]),t._v(" "),a("h3",{attrs:{id:"typeof-运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#typeof-运算符","aria-hidden":"true"}},[t._v("#")]),t._v(" typeof 运算符")]),t._v(" "),a("p",[a("strong",[t._v("typeof运算符")]),t._v("返回作为其参数的任何类型的"),a("code",[t._v("System.Type")]),t._v("对象，不能重载的一元运算符")]),t._v(" "),a("p",[t._v("eg:")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    class SomeClass\n    {\n        public int Field1;\n        public int Field2;\n        public void Method1() { }\n        public int Method2()\n        {\n            return 1;\n        }\n    }\n\n    // Program.cs\n    using System.Reflection;\n    class Program {\n        Type t = typeof(SomeClass);\n        FieldInfo[] fi = t.GetFields();\n        MethodInfo[] mi = t.GetMethods();\n        foreach (FieldInfo f in fi)\n            Console.WriteLine("Field: {0}", f.Name);\n        foreach (MethodInfo m in mi)\n            Console.WriteLine("Method: {0}", m.Name);\n        //Field: Field1\n        //Field: Field2\n        //Method: Method1\n        //Method: Method2\n        //Method: GetType\n        //Method: ToString\n        //Method: Equals\n        //Method: GetHashCode\n    }\n')])])]),a("h2",{attrs:{id:"九-语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#九-语句","aria-hidden":"true"}},[t._v("#")]),t._v(" 九.语句")]),t._v(" "),a("h3",{attrs:{id:"什么是语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是语句","aria-hidden":"true"}},[t._v("#")]),t._v(" 什么是语句")]),t._v(" "),a("p",[a("strong",[t._v("语句")]),t._v("是描述某个类型或让程序执行某某个动作的源代码指令：")]),t._v(" "),a("ul",[a("li",[t._v("声明语句 声明类型或变量")]),t._v(" "),a("li",[t._v("嵌入语句 执行动作或管理控制流")]),t._v(" "),a("li",[t._v("标签语句 控制跳转")])]),t._v(" "),a("p",[a("em",[t._v("空语句")]),t._v("由一个分号组成")]),t._v(" "),a("h3",{attrs:{id:"表达式语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#表达式语句","aria-hidden":"true"}},[t._v("#")]),t._v(" 表达式语句")]),t._v(" "),a("p",[a("code",[t._v("x=10;")]),t._v("这个表达式把运算符右边的值赋给变量x引用的内存位置，虽然这可能是这条语句的主要动机，但却被视为"),a("em",[t._v("副作用")])]),t._v(" "),a("h3",{attrs:{id:"控制流语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#控制流语句","aria-hidden":"true"}},[t._v("#")]),t._v(" 控制流语句")]),t._v(" "),a("p",[a("strong",[t._v("条件执行语句")]),t._v("是指依据一个条件执行或跳过 一个代码片段：")]),t._v(" "),a("ul",[a("li",[t._v("if")]),t._v(" "),a("li",[t._v("if...else")]),t._v(" "),a("li",[t._v("switch")])]),t._v(" "),a("p",[a("strong",[t._v("循环语句")]),t._v("是指重复执行一个代码片段：")]),t._v(" "),a("ul",[a("li",[t._v("while")]),t._v(" "),a("li",[t._v("do")]),t._v(" "),a("li",[t._v("for")]),t._v(" "),a("li",[t._v("foreach")])]),t._v(" "),a("p",[a("strong",[t._v("跳转语句")]),t._v("是指把控制流从一个代码片段改变到另一个代码片段中的指定语句：")]),t._v(" "),a("ul",[a("li",[t._v("break")]),t._v(" "),a("li",[t._v("continue")]),t._v(" "),a("li",[t._v("return")]),t._v(" "),a("li",[t._v("goto")]),t._v(" "),a("li",[t._v("throw")])]),t._v(" "),a("p",[a("em",[t._v("注意")]),t._v("，条件执行和循环结构必须有一个"),a("strong",[t._v("测试表达式")]),t._v("或"),a("strong",[t._v("条件")]),t._v("决定程序在哪里继续执行，这个测试表达式必须返回"),a("code",[t._v("bool")]),t._v("型值")]),t._v(" "),a("h3",{attrs:{id:"if语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#if语句","aria-hidden":"true"}},[t._v("#")]),t._v(" if语句")]),t._v(" "),a("p",[a("img",{attrs:{src:e(313),alt:""}})]),t._v(" "),a("h3",{attrs:{id:"if-else语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#if-else语句","aria-hidden":"true"}},[t._v("#")]),t._v(" if...else语句")]),t._v(" "),a("p",[a("img",{attrs:{src:e(314),alt:""}})]),t._v(" "),a("h3",{attrs:{id:"while语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#while语句","aria-hidden":"true"}},[t._v("#")]),t._v(" while语句")]),t._v(" "),a("p",[a("img",{attrs:{src:e(315),alt:""}})]),t._v(" "),a("h3",{attrs:{id:"do循环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#do循环","aria-hidden":"true"}},[t._v("#")]),t._v(" do循环")]),t._v(" "),a("p",[a("img",{attrs:{src:e(316),alt:""}})]),t._v(" "),a("h3",{attrs:{id:"for循环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#for循环","aria-hidden":"true"}},[t._v("#")]),t._v(" for循环")]),t._v(" "),a("p",[a("img",{attrs:{src:e(317),alt:""}})]),t._v(" "),a("p",[a("strong",[t._v("for循环")]),t._v("表达式：")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    for( Initializer ; TestExpr; IterationExpr )\n        statement\n")])])]),a("ul",[a("li",[t._v("for循环开始，"),a("strong",[t._v("只执行一次")]),t._v(" Initializer")]),t._v(" "),a("li",[t._v("对 TestExpr 求值，为 true 则执行 statement，接着执行 IterationExpr")]),t._v(" "),a("li",[t._v("再重复执行一步，如果为 false 就执行 statement 以外的语句")])]),t._v(" "),a("p",[t._v("eg:")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    for(int i = 0; i < 3; i++) // 注意变量 i 值在 for 语句的内部可见\n    {\n        Console.WriteLine("i: {0}", i);\n    }\n    // 0 1 2\n')])])]),a("p",[a("strong",[t._v("注意")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("任何声明在 initializer中的变量只在 for语句中可见")]),t._v(" "),a("li",[t._v("初始化和迭代表达式都可以包含多个表达式，用逗号隔开")])]),t._v(" "),a("h3",{attrs:{id:"switch语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#switch语句","aria-hidden":"true"}},[t._v("#")]),t._v(" switch语句")]),t._v(" "),a("p",[a("img",{attrs:{src:e(318),alt:""}})]),t._v(" "),a("p",[a("strong",[t._v("注意")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("一个"),a("code",[t._v("switch")]),t._v("语句可以有任意数目的分支，包括没有分支，"),a("code",[t._v("default")]),t._v("段不是必须的，但有"),a("code",[t._v("default")]),t._v("段可以捕获潜在错误，是个好习惯")]),t._v(" "),a("li",[a("code",[t._v("case")]),t._v("关键字后的分支标签必须是一个常量表达式，也就是说必须在"),a("em",[t._v("编译时")]),t._v("就完全获取运算结果，且类型应与测试表达式的一致")]),t._v(" "),a("li",[t._v("每一个"),a("code",[t._v("switch")]),t._v("段，包括可选的"),a("code",[t._v("default")]),t._v("段，都必须以一个跳转语句结尾")]),t._v(" "),a("li",[t._v("C#中不可执行一个"),a("code",[t._v("switch")]),t._v("段中的代码就直接执行下一个段的代码")])]),t._v(" "),a("p",[t._v("eg:")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    for( int x = 1; x < 6; x++ )\n    {\n        switch(x)\n        {\n            case 2:\n                Console.WriteLine("x is {0} -- In Case 2", x);\n                break;\n            case 3:\n                Console.WriteLine("x is {0} -- In Case 3", x);\n                break;\n            case 4:\n                Console.WriteLine("x is {0} -- In Case 4", x);\n                break;\n            default:\n                Console.WriteLine("x is {0} -- In Default case", x);\n                break;\n        }\n        //x is 1-- In Default case\n        //x is 2-- In Case 2\n        //x is 3-- In Case 3\n        //x is 4-- In Case 4\n        //x is 5-- In Default case\n    }\n')])])]),a("h3",{attrs:{id:"跳转语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#跳转语句","aria-hidden":"true"}},[t._v("#")]),t._v(" 跳转语句")]),t._v(" "),a("p",[a("strong",[t._v("跳转语句")]),t._v("包括：break; continue; return; goto; throw;")]),t._v(" "),a("h3",{attrs:{id:"break语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#break语句","aria-hidden":"true"}},[t._v("#")]),t._v(" break语句")]),t._v(" "),a("p",[a("strong",[t._v("break语句")]),t._v("可用于 switch、for、foreach、while、do等语句中，"),a("code",[t._v("break")]),t._v("导致执行跳出"),a("em",[t._v("最内层封装语句")])]),t._v(" "),a("h3",{attrs:{id:"continue语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#continue语句","aria-hidden":"true"}},[t._v("#")]),t._v(" continue语句")]),t._v(" "),a("p",[a("strong",[t._v("continue语句")]),t._v("可用于 while、do、for、foreach等语句中，"),a("code",[t._v("continue")]),t._v("导致执行跳出最内层封装语句的"),a("em",[t._v("顶端")])]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    for(int x = 0; x < 5; x++)\n    {\n        if (x < 3)\n            continue;\n        Console.WriteLine("Value of x is {0}", x);\n        // Value of x is 3\n        // Value of x is 4\n    }\n')])])]),a("h3",{attrs:{id:"标签语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#标签语句","aria-hidden":"true"}},[t._v("#")]),t._v(" 标签语句")]),t._v(" "),a("p",[a("strong",[t._v("标签语句")]),t._v("：由一个"),a("em",[t._v("标识符")]),t._v("后面跟着一个"),a("em",[t._v("冒号")]),t._v("再跟着"),a("em",[t._v("一条语句")]),t._v("组成：")]),t._v(" "),a("ul",[a("li",[t._v("Indentifier: Statement;")]),t._v(" "),a("li",[t._v("标签语句只执行"),a("code",[t._v("Statement")]),t._v("部分，这个标签是用于允许控制流从代码的其他部分转移到该语句")]),t._v(" "),a("li",[t._v("标签语句只能用于"),a("em",[t._v("块内部")]),t._v("，作用域范围在它声明的块内（和任何嵌套在该块内部的块）")])]),t._v(" "),a("p",[a("strong",[t._v("标签")]),t._v("标签语句中的表示符可以是任何有效的标识符，包括在重叠作用域内声明的标识符如本地变量或参数名：")]),t._v(" "),a("ul",[a("li",[t._v("不能是关键字")]),t._v(" "),a("li",[t._v("不能在重叠的范围内与另外一个标签标识符相同")])]),t._v(" "),a("h3",{attrs:{id:"goto语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#goto语句","aria-hidden":"true"}},[t._v("#")]),t._v(" goto语句")]),t._v(" "),a("p",[a("strong",[t._v("goto语句")]),t._v("：无条件转移控制到一个"),a("em",[t._v("标签语句")]),t._v("，结构是：")]),t._v(" "),a("ul",[a("li",[t._v("goto Indentifier;")]),t._v(" "),a("li",[t._v("goto语句必须在标签语句的"),a("em",[t._v("作用域之内")])]),t._v(" "),a("li",[t._v("goto语句可以"),a("em",[t._v("跳到")]),t._v("它本身所在块内的任何标签语句，或"),a("em",[t._v("跳出")]),t._v("到任何它"),a("em",[t._v("被嵌套")]),t._v("的块内的标签语句")]),t._v(" "),a("li",[t._v("goto语句不能"),a("em",[t._v("跳入")]),t._v("任何嵌套在该语句本身所在块内部的任何块")]),t._v(" "),a("li",[t._v("还可用于"),a("code",[t._v("switch")]),t._v("语句，即：goto case ConstantExpr; 和 goto default;")])]),t._v(" "),a("h3",{attrs:{id:"using语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#using语句","aria-hidden":"true"}},[t._v("#")]),t._v(" using语句")]),t._v(" "),a("p",[a("strong",[t._v("using语句")]),t._v("能帮助减少意外的运行时错误带来的潜在问题，它整洁地包装了资源地使用，有两种形式：")]),t._v(" "),a("ul",[a("li",[t._v("using( ResourceType Identifier = Expression ) Statement")]),t._v(" "),a("li",[a("pre",[a("code",[t._v("             ↑分配资源                     ↑使用资源\n")])])]),t._v(" "),a("li",[t._v("using( Expression ) EmbeddedStatement")]),t._v(" "),a("li",[a("pre",[a("code",[t._v("    ↑资源          ↑使用资源\n")])])])]),t._v(" "),a("p",[t._v("注意：")]),t._v(" "),a("ul",[a("li",[t._v("using语句不同于using指令")])]),t._v(" "),a("h3",{attrs:{id:"其他语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他语句","aria-hidden":"true"}},[t._v("#")]),t._v(" 其他语句")]),t._v(" "),a("p",[a("img",{attrs:{src:e(319),alt:""}})]),t._v(" "),a("h2",{attrs:{id:"十-结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#十-结构","aria-hidden":"true"}},[t._v("#")]),t._v(" 十.结构")]),t._v(" "),a("h3",{attrs:{id:"什么是结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是结构","aria-hidden":"true"}},[t._v("#")]),t._v(" 什么是结构")]),t._v(" "),a("p",[a("strong",[t._v("结构")]),t._v("是程序员定义的数据类型：")]),t._v(" "),a("ul",[a("li",[t._v("与类相似，有数据成员和函数成员")]),t._v(" "),a("li",[t._v("结构是值类型，类是引用类型")]),t._v(" "),a("li",[t._v("结构是隐式密封的，不能被派生")]),t._v(" "),a("li",[t._v("用关键字"),a("code",[t._v("struct")]),t._v("声明")])]),t._v(" "),a("p",[t._v("eg：")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    struct Point\n    {\n        public int x;\n        public int y;\n    }\n")])])]),a("h3",{attrs:{id:"结构是值类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结构是值类型","aria-hidden":"true"}},[t._v("#")]),t._v(" 结构是值类型")]),t._v(" "),a("p",[t._v("结构变量含有自己的数据：")]),t._v(" "),a("ul",[a("li",[t._v("结构类型的变量不能为"),a("code",[t._v("null")])]),t._v(" "),a("li",[t._v("两个结构变量不能引用同一个对象")])]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    struct Simple\n    {\n        public int x;\n        public int y;\n    }\n    class CSimple\n    {\n        public int x;\n        public int y\n    }\n    class Program {\n        static void Main() {\n            CSimple cs = new CSimple();\n            Simple ss = new Simple();\n        }\n    }\n")])])]),a("p",[a("img",{attrs:{src:e(320),alt:""}})]),t._v(" "),a("h3",{attrs:{id:"对结构赋值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对结构赋值","aria-hidden":"true"}},[t._v("#")]),t._v(" 对结构赋值")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    struct Simple\n    {\n        public int x;\n        public int y;\n    }\n    class CSimple\n    {\n        public int x;\n        public int y\n    }\n    class Program\n    {\n        static void Main(string[] args)\n        {\n        CSimple cs1 = new CSimple(), cs2 = null;\n        Simple ss1 = new Simple(), ss2 = new Simple();\n        cs1.x = ss1.x = 5;\n        cs1.y = ss1.y = 10;\n        cs2 = cs1;\n        ss2 = ss1;\n        }\n    }\n")])])]),a("p",[a("img",{attrs:{src:e(321),alt:""}})]),t._v(" "),a("h3",{attrs:{id:"构造函数和析构函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构造函数和析构函数","aria-hidden":"true"}},[t._v("#")]),t._v(" 构造函数和析构函数")]),t._v(" "),a("p",[t._v("注意：结构可以有实例构造函数和静态构造函数，"),a("em",[t._v("不能")]),t._v("有析构函数")]),t._v(" "),a("p",[a("strong",[t._v("结构的实例构造函数")]),t._v("：语言隐式为每个结构提供一个无参构造函数")]),t._v(" "),a("ul",[a("li",[t._v("预定义的无参构造函数不允许删除或重定义")]),t._v(" "),a("li",[t._v("只能自定义含参的实例构造函数")]),t._v(" "),a("li",[t._v("也可以不通过"),a("code",[t._v("new")]),t._v("运算符创建结构实例，但会有一些限制：\n"),a("ul",[a("li",[t._v("在显式设置数据之后，才能使用它们的值，否者编译器会报错")]),t._v(" "),a("li",[t._v("在对所有数据成员赋值之后，才能"),a("em",[t._v("调用任何")]),t._v("函数成员")])])])]),t._v(" "),a("p",[a("img",{attrs:{src:e(322),alt:""}})]),t._v(" "),a("p",[a("strong",[t._v("静态构造函数")]),t._v("：创建并初始化静态数据成员，不能引用实例成员：")]),t._v(" "),a("ul",[a("li",[t._v("调用显式声明的构造函数")]),t._v(" "),a("li",[t._v("引用结构的静态成员")])]),t._v(" "),a("h3",{attrs:{id:"字段初始化时是不允许的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字段初始化时是不允许的","aria-hidden":"true"}},[t._v("#")]),t._v(" 字段初始化时是不允许的")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    struct Simple {\n        public int x = 10; // 不允许，编译错误\n    }\n")])])]),a("h3",{attrs:{id:"结构是密封的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结构是密封的","aria-hidden":"true"}},[t._v("#")]),t._v(" 结构是密封的")]),t._v(" "),a("p",[a("strong",[t._v("结构总是隐式密封")]),t._v("。不能继承，所以不能用于结构的修饰符：protected、internal、abstract、virtual")]),t._v(" "),a("p",[t._v("结构本身派生自"),a("code",[t._v("System.ValueType")]),t._v(",而"),a("code",[t._v("System.ValueType")]),t._v("派生自"),a("code",[t._v("Object")])]),t._v(" "),a("h3",{attrs:{id:"装箱和拆箱"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#装箱和拆箱","aria-hidden":"true"}},[t._v("#")]),t._v(" 装箱和拆箱")]),t._v(" "),a("p",[t._v("目的：将一个结构实例作为引用类型对象，创建"),a("em",[t._v("装箱")]),t._v("的副本")]),t._v(" "),a("p",[t._v("装箱：是指制作值类型变量的引用类型副本")]),t._v(" "),a("h3",{attrs:{id:"结构作为返回值和参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结构作为返回值和参数","aria-hidden":"true"}},[t._v("#")]),t._v(" 结构作为返回值和参数")]),t._v(" "),a("p",[a("strong",[t._v("结构")]),t._v("可以用作"),a("em",[t._v("返回值")]),t._v("和"),a("em",[t._v("参数")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("返回值时，将创建它的副本并从函数成员返回")]),t._v(" "),a("li",[t._v("参数时，将创建实参结构的副本，该副本用于方法的执行中")]),t._v(" "),a("li",[t._v("ref和out参数，传入方法的是该结构的一个引用，这样就能修改其数据成员")])]),t._v(" "),a("h2",{attrs:{id:"十一-枚举"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#十一-枚举","aria-hidden":"true"}},[t._v("#")]),t._v(" 十一.枚举")]),t._v(" "),a("h3",{attrs:{id:"枚举"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#枚举","aria-hidden":"true"}},[t._v("#")]),t._v(" 枚举")]),t._v(" "),a("p",[a("strong",[t._v("枚举")]),t._v("是自定义的类型，与类和结构一样：")]),t._v(" "),a("ul",[a("li",[t._v("枚举是"),a("em",[t._v("值类型")]),t._v("，直接存储数据")]),t._v(" "),a("li",[t._v("枚举只有一种类型成员: 命名的整数值常量")]),t._v(" "),a("li",[t._v("用关键字"),a("code",[t._v("enum")]),t._v("声明")]),t._v(" "),a("li",[t._v("成员声明列表用"),a("em",[t._v("逗号")]),t._v("分隔，在枚举声明中没有分号")]),t._v(" "),a("li",[t._v("每个枚举成员都被赋予一个底层类型(默认是整型)的常量值")]),t._v(" "),a("li",[t._v("默认情况下，编译器会把第一个值赋值0，并对每一个后续成员赋值比前一个成员多1")])]),t._v(" "),a("p",[t._v("eg：")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    enum TrafficLight {\n        Green,\n        Yellow,\n        Red\n    }\n    class Program {\n        static void Main() {\n            TrafficLight t1 = \n        }\n    }\n")])])]),a("p",[a("strong",[t._v("设置底层类型")]),t._v("：在声明时用冒号和类型加在声明后,所有成员常量都属于枚举的底层类型")]),t._v(" "),a("p",[t._v("eg:")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    enum TrafficLight: ulong {\n        //\n    }\n")])])]),a("p",[t._v("成员常量的值也可以是底层类型的任何值:如要显式设置一个成员的值，只需在枚举声明中的变量名后使用初始化表达式，不能有重复的变量名，但可有重复的值：")]),t._v(" "),a("p",[t._v("eg:")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    enum TrafficLight {\n        Green = 10,\n        Yellow = 15,\n        Red = 15\n    }\n")])])]),a("h3",{attrs:{id:"位标志"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#位标志","aria-hidden":"true"}},[t._v("#")]),t._v(" 位标志")]),t._v(" "),a("pre",[a("code",[t._v("使用单个字的不同位作为表示一组开/关标志的紧凑方法\n")])]),t._v(" "),a("h3",{attrs:{id:"关于枚举的补充"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关于枚举的补充","aria-hidden":"true"}},[t._v("#")]),t._v(" 关于枚举的补充")]),t._v(" "),a("p",[t._v("补充：")]),t._v(" "),a("ul",[a("li",[t._v("枚举只有单一的成员类型：声明的成员常量")]),t._v(" "),a("li",[t._v("不能对成员使用修饰符，它们都隐式地具有与枚举相同地可访问性")]),t._v(" "),a("li",[t._v("由于成员是常量，即使在没有该枚举类型地变量时它们也能被访问，使用枚举类型名跟点和成员名")]),t._v(" "),a("li",[t._v("比较不同枚举类型地成员会导致编译时错误（指的是同一个枚举中地成员比较不会出错，不同一个就会出错）")])]),t._v(" "),a("h2",{attrs:{id:"十二-数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#十二-数组","aria-hidden":"true"}},[t._v("#")]),t._v(" 十二.数组")]),t._v(" "),a("h3",{attrs:{id:"数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组","aria-hidden":"true"}},[t._v("#")]),t._v(" 数组")]),t._v(" "),a("p",[a("strong",[t._v("数组")]),t._v("是由一个变量名称表示的一组"),a("em",[t._v("同类型")]),t._v("的数据元素")]),t._v(" "),a("ul",[a("li",[t._v("元素：数组的独立数据项")]),t._v(" "),a("li",[t._v("秩/维度：数组可以有任何为正数的维度数（秩）")]),t._v(" "),a("li",[t._v("维度长度：朝一个方向的位置个数")]),t._v(" "),a("li",[t._v("数组长度：所有维度中的元素总和")])]),t._v(" "),a("p",[t._v("注意：数组一旦创建，大小就固定，不支持动态数组")]),t._v(" "),a("h3",{attrs:{id:"数组的类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组的类型","aria-hidden":"true"}},[t._v("#")]),t._v(" 数组的类型")]),t._v(" "),a("ul",[a("li",[t._v("一维数组：单行元素或元素向量")]),t._v(" "),a("li",[t._v("多维数组：由主向量中的位置组成，每一个位置本身又是一个数组，称为子数组；\n"),a("ul",[a("li",[t._v("矩形数组：\n"),a("ul",[a("li",[t._v("某个维度的所有子数组有相同长度的多维数组")]),t._v(" "),a("li",[t._v("不管有多少维度，总是使用一组方括号： `int x = myArray[4, 6, 1]")])])]),t._v(" "),a("li",[t._v("交错数组：\n"),a("ul",[a("li",[t._v("每一个子数组都是独立数组的多维数组")]),t._v(" "),a("li",[t._v("可以有不同长度的子数组")]),t._v(" "),a("li",[t._v("为数组的每一个维度使用一对方括号："),a("code",[t._v("int y = jagArray[2][7][4]")])])])])])])]),t._v(" "),a("p",[a("img",{attrs:{src:e(323),alt:""}})]),t._v(" "),a("h3",{attrs:{id:"数组是对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组是对象","aria-hidden":"true"}},[t._v("#")]),t._v(" 数组是对象")]),t._v(" "),a("p",[t._v("数组实例是从"),a("code",[t._v("System.Array")]),t._v("继承的对象，继承了很多有用的方法如：Rank(返回数组维度数的属性)、Length(返回数组的长度)；数组也是"),a("strong",[t._v("引用类型")]),t._v("，但数组元素可以是值类型或引用类型")]),t._v(" "),a("p",[a("img",{attrs:{src:e(324),alt:""}})]),t._v(" "),a("h3",{attrs:{id:"一维数组和矩形数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一维数组和矩形数组","aria-hidden":"true"}},[t._v("#")]),t._v(" 一维数组和矩形数组")]),t._v(" "),a("p",[a("strong",[t._v("声明")]),t._v("一维数组或矩形数组：")]),t._v(" "),a("ul",[a("li",[t._v("在类型和变量名之间使用一对方括号")]),t._v(" "),a("li",[t._v("方括号内的逗号称为秩说明符，秩就是逗号数加1")]),t._v(" "),a("li",[t._v("不可再数组类型区域中放数组维度的长度，维度长度直到数组实例化才会确定")])]),t._v(" "),a("p",[t._v("eg:")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    int[,,] firstArray; // 正确\n    int[,,,] array3; // 正确\n    long[3,2,6] secondArray; // 错误示例，不能写维度长度，会出现编译错误\n")])])]),a("h3",{attrs:{id:"实例化一维数组或矩形数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实例化一维数组或矩形数组","aria-hidden":"true"}},[t._v("#")]),t._v(" 实例化一维数组或矩形数组")]),t._v(" "),a("p",[a("strong",[t._v("数组创建表达式")]),t._v("：由 "),a("code",[t._v("new")]),t._v("运算符加基类名称和一对方括号组成")]),t._v(" "),a("p",[t._v("eg：")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    int[] arr2 = new int[4]; // arr2数组是包含4个int的一维数组\n    int[,,] arr3 = new int[3,6,2]; // arr3数组是三维数组\n    MyClass[] mcArr = new MyClass[4]; // mcArr数组是包含4个MyClass引用的一维数组\n")])])]),a("p",[a("img",{attrs:{src:e(325),alt:""}})]),t._v(" "),a("h3",{attrs:{id:"访问数组元素"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#访问数组元素","aria-hidden":"true"}},[t._v("#")]),t._v(" 访问数组元素")]),t._v(" "),a("p",[a("strong",[t._v("访问数组元素")]),t._v("：使用整型值作为索引来访问数组元素")]),t._v(" "),a("ul",[a("li",[t._v("每一个维度的索引从0开始")]),t._v(" "),a("li",[t._v("方括号内的索引在数组名称之后")])]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    class Example12\n    {\n        public void test ()\n        {\n            int[] intArr1 = new int[15];\n            intArr1[2] = 10;\n            int var1 = intArr1[2];\n\n            int[,] intArr2 = new int[5, 10];\n            intArr2[2, 3] = 7;\n            int var2 = intArr2[2, 3];\n\n            int[] myIntArray;\n            myIntArray = new int[4];\n            for( int i =0; i< 4;i++)\n            {\n                myIntArray[i] = i * 10;\n            }\n            for(int i = 0; i<4; i++)\n            {\n                Console.WriteLine("Value of element {0} = {1}", i, myIntArray[i]);\n            }\n        }\n    }\n    class Program\n    {\n        static void Main(string[] args)\n        {\n        Example12 eg12 = new Example12();\n        eg12.test();\n        }\n        // Value of element 0 = 0\n        // Value of element 1 = 10\n        // Value of element 2 = 20\n        // Value of element 3 = 30\n    }\n')])])]),a("h3",{attrs:{id:"初始化数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#初始化数组","aria-hidden":"true"}},[t._v("#")]),t._v(" 初始化数组")]),t._v(" "),a("p",[a("strong",[t._v("数组初始化")]),t._v("：当数组被创建后，每一个元素被自动初始化为类型的默认值，对于预定义类型，整型默认值为0，浮点型默认值为0.0，布尔型默认值为false，引用类型默认值为null")]),t._v(" "),a("p",[a("strong",[t._v("显式初始化一维数组")]),t._v("：显式初始化一维数组，可以在实例化的数组创建表达式后加上一个"),a("em",[t._v("初始化列表")])]),t._v(" "),a("ul",[a("li",[t._v("初始值必须用逗号分隔开，并封闭在一组大括号内")]),t._v(" "),a("li",[t._v("不必输入维度的长度，编译器直接根据初始化值得个数来推断")]),t._v(" "),a("li",[t._v("数组创建表达式和初始化列表之间没有分隔符")])]),t._v(" "),a("p",[t._v("eg: "),a("code",[t._v("int[] intArr = new int[] {10, 20, 30, 40};")])]),t._v(" "),a("p",[a("strong",[t._v("显式初始化矩形数组")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("每一个初始值向量必须封闭在大括号内")]),t._v(" "),a("li",[t._v("每一个维度必须嵌套并封闭在大括号内")]),t._v(" "),a("li",[t._v("除了初始值，每一个维度的初始化列表和组成部分也必须用逗号分隔开")])]),t._v(" "),a("p",[t._v("eg:")]),t._v(" "),a("p",[a("code",[t._v("int[,] intArray2 = new int[,] { {10, 1}, {2, 10}, {11, 9} };")]),t._v(" "),a("img",{attrs:{src:e(326),alt:""}})]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("int[,,] intArray3 = new int[4, 3, 2] {\n    { {8, 6}, {5, 2}, {12, 9} },\n    { {6, 4}, {3, 9}, {18, 4} },\n    { {7, 1}, {1, 3}, {29, 3} },\n    { {4, 6}, {3, 2}, {23, 8} }\n}\n")])])]),a("p",[t._v("注意：当在一条语句中使用声明、数组创建和初始化时，可以"),a("strong",[t._v("省略")]),t._v("数组的创建表达式部分，只提供初始化部分：")]),t._v(" "),a("p",[t._v("eg:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    int[] arr1 = int[3] {10, 20, 30}; \n    等价于\n    int[] arr1 =        {10, 20, 30};\n")])])]),a("p",[a("strong",[t._v("隐式类型数组")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("当初始化数组时，可以让编译器根据初始化语句推断数组类型，只要初始化语句能隐式转换为单个类型")]),t._v(" "),a("li",[t._v("和隐式类型的局部变量一样，使用"),a("code",[t._v("var")]),t._v("关键字来替代数组的类型")]),t._v(" "),a("li",[t._v("初始化语句中仍需要提供秩说明符")])]),t._v(" "),a("p",[t._v("eg:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    var intArr2 = new [] {10, 20,  30, 40 };\n    var intArr4 = new [,] { {10, 1}, {2, 10}, {11, 9} };\n    var sArray1 = new [] { "life", "liberty", "pursuit of hanppiness" };\n')])])]),a("p",[t._v("综合：\neg:")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    var arr = new[,] { { 0, 1, 2 }, { 10, 11, 12 } };\n                for(int i = 0; i < 2; i++)\n                {\n                    for(int j = 0; j<3; j++)\n                   {\n                       Console.WriteLine("Element [{0}, {1}] is  {2}", i, j, arr[i, j]);\n                    }\n                }\n// Element [0, 0] is  0\n// Element [0, 1] is  1\n// Element [0, 2] is  2\n// Element [1, 0] is  10\n// Element [1, 1] is  11\n// Element [1, 2] is  12\n')])])]),a("h3",{attrs:{id:"交错数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#交错数组","aria-hidden":"true"}},[t._v("#")]),t._v(" 交错数组")]),t._v(" "),a("p",[a("strong",[t._v("交错数组")]),t._v("：与矩形数组相比，交错数组的子数组元素个数可以不同")]),t._v(" "),a("p",[t._v("eg:\n"),a("code",[t._v("int[][] jagArr = new int[3][]; // 一个二维的3个int数组的交错数组")]),t._v(" "),a("img",{attrs:{src:e(327),alt:""}})]),t._v(" "),a("p",[a("strong",[t._v("声明交错数组")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("每一个维度都有一对独立的方括号，方括号数决定了数组的秩")]),t._v(" "),a("li",[t._v("交错数组的维度可以是大于1的任意整数")]),t._v(" "),a("li",[t._v("和矩形数组一样，维度长度不能包括在数组类型的声明部分")])]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    int[][] someArr;\n    int[][][] otherArr;\n")])])]),a("p",[a("strong",[t._v("实例化交错数组")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("首先，实例化顶层数组，不能在声明语句中初始化顶层数组之外的数组")]),t._v(" "),a("li",[t._v("其次，实例化每一个子数组，把新建数组的引用赋给它们所属数组的合适元素")])]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    int[][] jagArr = new int[3][]; // 1. 正确\n    int[][] jagArr = new int[3][4]; // 1. 编译错误\n\n    jagArr[0] = new int[] {10, 20, 30}; //2. \n    jagArr[1] = new int[] {40, 50, 60, 70}; // 3. \n    jagArr[2] = new int[] {80, 90, 100, 110, 120}; // 4.\n")])])]),a("p",[a("img",{attrs:{src:e(328),alt:""}})]),t._v(" "),a("p",[a("strong",[t._v("交错数组中的子数组")]),t._v("：由于子数组本身就是数组，可能包含矩形数组\n"),a("img",{attrs:{src:e(329),alt:""}})]),t._v(" "),a("p",[t._v("eg:")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    int[][,] Arr;\n    Arr = new int[3][,];\n    Arr[0] = new int[,] { { 10, 20 }, { 100, 200 } };\n    Arr[1] = new int[,] { { 30, 40, 50 }, { 300, 400, 500 } };\n    Arr[2] = new int[,] { { 60, 70, 80, 90 }, { 600, 700, 800, 900 } };\n    for (int i = 0; i < Arr.GetLength(0); i++) // 获取Arr维度0的长度 3 i<3\n    {\n        for (int j = 0; j < Arr[i].GetLength(0); j++) // 获取Arr[0]、Arr[1]、Arr[2]维度0的长度 都为2 j<2\n        {\n            for (int k = 0; k < Arr[i].GetLength(1); k++) // 获取Arr[0]、Arr[1]、Arr[2]维度1的长度 为2、3、4 k<2、k<3、k<4\n            {\n            \n                Console.WriteLine("[{0},{1},{2}] = {3}", i, j, k, Arr[i][j, k]);\n            }\n            Console.WriteLine("");\n\n        }\n        Console.WriteLine("");\n\n    }\n// [0,0,0] = 10  // [0,1,0] = 100\n// [0,0,1] = 20  // [0,1,1] = 200\n \n// [1,0,0] = 30  // [1,1,0] = 300\n// [1,0,1] = 40  // [1,1,1] = 400\n// [1,0,2] = 50  // [1,1,2] = 500\n\n// [2,0,0] = 60  // [2,1,0] = 600\n// [2,0,1] = 70  // [2,1,1] = 700\n// [2,0,2] = 80  // [2,1,2] = 800\n// [2,0,3] = 90  // [2,1,3] = 900\n\n')])])]),a("h3",{attrs:{id:"比较矩形数组和交错数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#比较矩形数组和交错数组","aria-hidden":"true"}},[t._v("#")]),t._v(" 比较矩形数组和交错数组")]),t._v(" "),a("p",[t._v("一个3*3的矩形数组和一个长度为3的一维数组构成的交错数组比较：")]),t._v(" "),a("ul",[a("li",[t._v("两个数组都保存了9个整数，但结构不同")]),t._v(" "),a("li",[t._v("矩形数组只有单个的数组对象，而交错数组有4个数组对象\n"),a("img",{attrs:{src:e(330),alt:""}})])]),t._v(" "),a("h3",{attrs:{id:"foreach语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#foreach语句","aria-hidden":"true"}},[t._v("#")]),t._v(" foreach语句")]),t._v(" "),a("p",[a("code",[t._v("foreach")]),t._v("语句允许我们连续访问数组中的每一个元素：")]),t._v(" "),a("ul",[a("li",[t._v("迭代变量时临时的，并和数组中元素的类型相同")]),t._v(" "),a("li",[t._v("Type 是数组中元素的类型，可以显式提供它的类型，也可以用 "),a("code",[t._v("var")]),t._v("隐式声明，让编译器推断数组类型")]),t._v(" "),a("li",[t._v("Identifier 是迭代变量的名字")]),t._v(" "),a("li",[t._v("ArrayName 是数组的名字")]),t._v(" "),a("li",[t._v("Statement 是要为数组中的每一个元素执行一次单条语句或语句块\n"),a("img",{attrs:{src:e(331),alt:""}})])]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    int[] arr1 = { 10, 11, 12, 13 };\n    foreach(int item in arr1)\n    {\n        Console.WriteLine("Item value: {0}", item);\n    }\n')])])]),a("p",[a("strong",[t._v("迭代变量是只读的")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("由于迭代变量是只读的，所以不能改变")]),t._v(" "),a("li",[t._v("对于值类型数组，我们不能改变迭代变量")]),t._v(" "),a("li",[t._v("对于引用型数组，我们可以通过改变迭代变量进而改变数据")])]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    class Example12\n    {\n        public int MyFiled = 0;\n    }\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Example12[] exArray = new Example12[4]; // 创建数组\n            for(int i = 0; i<4;i++)\n            {\n                exArray[i] = new Example12(); // 创建类对象\n                exArray[i].MyFiled = i; // 设置字段\n            }\n            foreach(Example12 item in exArray)\n            {\n                item.MyFiled += 10; // 改变数据\n            }\n            foreach(Example12 item in exArray)\n            {\n                Console.WriteLine("{0}", item.MyFiled); // 10 11 12 13\n            }\n    }\n')])])]),a("p",[a("strong",[t._v("多维数组与foreach语句示例")]),t._v("：\neg:矩形数组")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    class Program\n    {\n        static void Main(string[] args)\n        {\n            int total = 0;\n            int[,] arr1 = { { 10, 11 }, { 12, 13 } };\n            foreach(var element in arr1)\n            {\n                total += element;\n                Console.WriteLine("Element: {0}, current total: {1}", element, total);\n                // 10 11 12 13\n            }\n        }\n    }\n            \n')])])]),a("p",[t._v("eg:交错数组（每一个维度使用独立的foreach语句）")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    class Program\n    {\n        static void Main(string[] args)\n        {\n        int total = 0;\n        int[][] arr1 = new int[2][];\n        arr1[0] = new int[] { 10, 11 };\n        arr1[1] = new int[] { 12, 13, 14 };\n        foreach(int[] array in arr1)\n        {\n            Console.WriteLine("Starting new array");\n            foreach(int item in array)\n            {\n                total += item;\n                Console.WriteLine("Item: {0}, Current total: {1}", item, total);\n            }\n        }\n    }\n// Starting new array\n// Item: 10, Current total: 10\n// Item: 11, Current total: 21\n// Starting new array\n// Item: 12, Current total: 33\n// Item: 13, Current total: 46\n// Item: 14, Current total: 60\n')])])]),a("h3",{attrs:{id:"数组协变"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组协变","aria-hidden":"true"}},[t._v("#")]),t._v(" 数组协变")]),t._v(" "),a("p",[a("strong",[t._v("数组协变")]),t._v("：以下情况下，即使某个对象不是数组的基类型，也可以把它赋值给数组元素，这种属性就叫做数组协变")]),t._v(" "),a("ul",[a("li",[t._v("数组是引用类型数组")]),t._v(" "),a("li",[t._v("在赋值的对象类型和数组基类型之间有隐式或显式转换（由于派生类和基类之间总是有隐式转换，所以总是可以将一个派生类的对象赋值给为基类声明的数组）")])]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    class A { ... }\n    class B : A { ... }\n    class Program {\n        static void Main() {\n            A[] AArray1 = new A[3];\n            A[] AArray2 = new A[3];\n\n            // 普通：将A类型的对象赋值给A类型的数组\n            AArray1[0] = new A();\n            AArray1[1] = new A();\n            AArray1[2] = new A();\n\n            // 协变：将B类型的对象赋值给A类型的数组\n            AArray2[0] = new B();\n            AArray2[1] = new B();\n            AArray2[2] = new B();\n        }\n    }\n")])])]),a("p",[a("img",{attrs:{src:e(332),alt:""}})]),t._v(" "),a("h3",{attrs:{id:"数组继承的有用成员"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组继承的有用成员","aria-hidden":"true"}},[t._v("#")]),t._v(" 数组继承的有用成员")]),t._v(" "),a("p",[t._v("数组继承很多有用的属性和方法：")]),t._v(" "),a("p",[a("img",{attrs:{src:e(333),alt:""}})]),t._v(" "),a("p",[t._v("eg:")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    class Program\n    {\n        public static void PrintArray(int[] a)\n        {\n            foreach( var x in a)\n            {\n                Console.WriteLine("{0}", x);\n            }\n            Console.WriteLine("");\n            }\n        static void Main(string[] args)\n        {\n            int[] arr = new int[] { 15, 20, 5, 25, 10 };\n            PrintArray(arr);\n\n            Array.Sort(arr);\n            PrintArray(arr);\n\n            Array.Reverse(arr);\n            PrintArray(arr);\n\n            Console.WriteLine();\n            Console.WriteLine("Rank = {0}, length = {1}", arr.Rank, arr.Length); // Rank = 1 Length = 5\n            Console.WriteLine("GetLength(0) = {0}", arr.GetLength(0)); // 5\n            Console.WriteLine("GetType() = {0}", arr.GetType()); // System/Int32[] \n    }\n')])])]),a("p",[a("strong",[t._v("Clone方法")]),t._v("：为数组进行浅复制，只创建了数组本身的克隆，如果是引用类型的数组，它不会复制元素引用的对象")]),t._v(" "),a("ul",[a("li",[t._v("克隆值类型数组会产生两个独立数组")]),t._v(" "),a("li",[t._v("克隆引用类型数组会产生指向相同对象的两个数组")]),t._v(" "),a("li",[t._v("克隆方法返回Object类型的引用，它必须被强制转换成数组类型")])]),t._v(" "),a("p",[a("img",{attrs:{src:e(334),alt:""}})]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    class A {\n        public int Value = 5;\n    }\n    class Program {\n        static void Main() {\n            A[] AArray1 = new A[3] { new A(), new A(), new A()};\n            A[] AArray2 = (A[]) AArray1.Clone();\n            AArray2[0].Value = 100;\n            AArray2[1].Value = 200;\n            AArray2[2].Value = 300;\n        }\n    }\n")])])]),a("p",[a("img",{attrs:{src:e(335),alt:""}})]),t._v(" "),a("h3",{attrs:{id:"比较数组的类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#比较数组的类型","aria-hidden":"true"}},[t._v("#")]),t._v(" 比较数组的类型")]),t._v(" "),a("p",[a("img",{attrs:{src:e(336),alt:""}})]),t._v(" "),a("h2",{attrs:{id:"十三-委托"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#十三-委托","aria-hidden":"true"}},[t._v("#")]),t._v(" 十三.委托")]),t._v(" "),a("h3",{attrs:{id:"什么是委托"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是委托","aria-hidden":"true"}},[t._v("#")]),t._v(" 什么是委托")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    delegate void MyDel(int value); // 声明一个委托类型\n    class Program\n    {\n        void PrintLow(int value)\n        {\n            Console.WriteLine("{0} - Low Value", value);\n        }\n        void PrintHigh(int value)\n        {\n            Console.WriteLine("{0} - High Value", value);\n        }\n            static void Main(string[] args)\n            {\n                Program program = new Program();\n                MyDel del; // 声明委托变量\n                Random rand = new Random(); // 创建随机整数生成器对象，并得到0至99之间的一个随机数\n                int randValue = rand.Next(99);\n                // 创建一个包含PrintLow或PrintHigh的委托对象并将其赋值给del变量\n                del = randValue < 50 ? new MyDel(program.PrintLow) : new MyDel(program.PrintHigh);\n                del(randValue); // 执行委托\n            }\n    }\n')])])]),a("h3",{attrs:{id:"委托概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#委托概述","aria-hidden":"true"}},[t._v("#")]),t._v(" 委托概述")]),t._v(" "),a("p",[a("strong",[t._v("委托")]),t._v("与类一样，是一种用户自定义的类型；但类表示的是数据和方法的集合，而委托则持有一个或多个方法，以及一系列预定义操作")]),t._v(" "),a("p",[a("img",{attrs:{src:e(337),alt:""}})]),t._v(" "),a("p",[t._v("也可以将"),a("em",[t._v("委托")]),t._v("看作一个包含有序方法列表的对象，这些方法有相同的签名和返回类型：")]),t._v(" "),a("ul",[a("li",[t._v("方法的列表称为调用列表")]),t._v(" "),a("li",[t._v("委托保存的方法可以来自任何类或结构，只要它们符合以下两点：\n"),a("ul",[a("li",[t._v("委托的返回类型")]),t._v(" "),a("li",[t._v("委托的签名（包括ref和out修饰符）")])])]),t._v(" "),a("li",[t._v("调用列表中的方法可以是实例方法也可以是静态方法")]),t._v(" "),a("li",[t._v("在调用委托时，会执行其调用列表中的所有方法")])]),t._v(" "),a("p",[a("img",{attrs:{src:e(338),alt:""}})]),t._v(" "),a("h3",{attrs:{id:"声明委托类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#声明委托类型","aria-hidden":"true"}},[t._v("#")]),t._v(" 声明委托类型")]),t._v(" "),a("p",[a("strong",[t._v("声明委托类型")]),t._v("：委托类型的声明与方法声明很相似，有"),a("em",[t._v("返回类型")]),t._v("和"),a("em",[t._v("签名")]),t._v("，返回类型和签名指定了委托接受的方法的形式")]),t._v(" "),a("ul",[a("li",[t._v("以"),a("code",[t._v("delegate")]),t._v("关键字开头")]),t._v(" "),a("li",[t._v("没有方法主体")]),t._v(" "),a("li",[t._v("不需要在类型内部声明，因为委托也是一种类型")])]),t._v(" "),a("p",[t._v("eg:")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("delegate void MyDel(int x); // 声明了一个只会接受不返回值并且有单个int参数的方法的MyDel类型委托\n")])])]),a("h3",{attrs:{id:"创建委托对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建委托对象","aria-hidden":"true"}},[t._v("#")]),t._v(" 创建委托对象")]),t._v(" "),a("p",[t._v("委托时"),a("strong",[t._v("引用类型")]),t._v("，所以也有引用和对象。在委托类型声明之后，可以声明变量并创建委托对象，有以下两种方式：")]),t._v(" "),a("ul",[a("li",[t._v("第一种使用带"),a("code",[t._v("new")]),t._v("运算符的对象创建表达式："),a("code",[t._v("delVar = new MyDel(myInstObj.MyM1)")]),t._v(" "),a("ul",[a("li",[t._v("委托类型名")]),t._v(" "),a("li",[t._v("一组圆括号，包含作为调用列表中第一个成员的方法名字，可以是实例方法，也可以是静态方法")])])]),t._v(" "),a("li",[t._v("第二种是快捷语法，仅由方法说明符构成："),a("code",[t._v("delVAr = SClass.OtherM2")]),t._v(" "),a("ul",[a("li",[t._v("因为方法名称和其对应的委托类型之间存在隐式转换，所以能够使用快捷语法")])])])]),t._v(" "),a("p",[a("img",{attrs:{src:e(339),alt:""}})]),t._v(" "),a("h3",{attrs:{id:"给委托赋值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#给委托赋值","aria-hidden":"true"}},[t._v("#")]),t._v(" 给委托赋值")]),t._v(" "),a("p",[t._v("因为委托是引用类型，可以通过给它"),a("strong",[t._v("赋值")]),t._v("来改变包含在委托变量中的引用，旧的委托对象会被垃圾回收器回收")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    delegate void MyDel(int x);\n    MyDel = myInstObj.MyM1;\n    ...\n    MyDel = SClass.OtherM2;\n")])])]),a("p",[a("img",{attrs:{src:e(340),alt:""}})]),t._v(" "),a("h3",{attrs:{id:"组合委托"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组合委托","aria-hidden":"true"}},[t._v("#")]),t._v(" 组合委托")]),t._v(" "),a("p",[t._v("委托可以使用"),a("strong",[t._v("额外的运算符")]),t._v("来"),a("strong",[t._v("组合")]),t._v("：这个运算符最终会创建一个新的委托，其调用列表连接了作为操作数的两个委托的调用列表副本")]),t._v(" "),a("p",[t._v("eg:")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    MyDel delA = myInstObj.MyM1;\n    MyDel delB = CSlass.otherM2;\n    MyDel delC = delA + delB; // 组合调用列表\n")])])]),a("p",[t._v("注意：委托是"),a("strong",[t._v("恒定")]),t._v("的，委托对象被创建后不能再被改变，所以作为操作数的委托没有被改变")]),t._v(" "),a("p",[a("img",{attrs:{src:e(341),alt:""}})]),t._v(" "),a("h3",{attrs:{id:"为委托添加方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为委托添加方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 为委托添加方法")]),t._v(" "),a("p",[t._v("使用+=运算符为委托"),a("strong",[t._v("添加")]),t._v("方法：实际上是创建了一个新的委托，其调用列表是左边的委托加上右边的方法的组合，然后将这个新的委托赋值给delVar")]),t._v(" "),a("p",[t._v("eg:")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    MyDel delVar = inst.MyM1; // 创建并初始化\n    delVar += SCl.m3; // 增加方法\n    delVar += X.Act; // 增加方法\n")])])]),a("p",[a("img",{attrs:{src:e(342),alt:""}})]),t._v(" "),a("h3",{attrs:{id:"为委托移除方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为委托移除方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 为委托移除方法")]),t._v(" "),a("p",[t._v("使用-=运算符为委托"),a("strong",[t._v("移除")]),t._v("方法：实际上也是创建了一个新的委托。新的委托是旧委托的副本，只是没有了已移除方法的引用，注意的是：")]),t._v(" "),a("ul",[a("li",[t._v("如果在调用列表中的方法有多个实例，-=运算符会从列表最后开始搜索，并移除第一个与方法匹配的实例")]),t._v(" "),a("li",[t._v("试图删除委托中不存在的方法是没有效果")]),t._v(" "),a("li",[t._v("试图调用空委托会抛出异常，可以通过把委托和null进行比较来判断委托的调用列表是否为空，如果为空则委托是null")])]),t._v(" "),a("p",[a("img",{attrs:{src:e(343),alt:""}})]),t._v(" "),a("h3",{attrs:{id:"调用委托"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#调用委托","aria-hidden":"true"}},[t._v("#")]),t._v(" 调用委托")]),t._v(" "),a("p",[t._v("可以像调用方法一样简单地调用委托：用于调用委托的参数将会调用调用列表中的每一个方法（除非有输出参数），如果一个方法在调用列表中出现多次，当委托被调用时，每次在列表中遇到这个方法时它都会被调用一次")]),t._v(" "),a("p",[t._v("eg:")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    MyDel delVar = inst.MyM1;\n    delVar += SCl.m3;\n    delVar += X.Axt;\n    ...\n    delVar(55); // 调用委托\n")])])]),a("p",[a("img",{attrs:{src:e(344),alt:""}})]),t._v(" "),a("h3",{attrs:{id:"委托的示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#委托的示例","aria-hidden":"true"}},[t._v("#")]),t._v(" 委托的示例")]),t._v(" "),a("p",[t._v("eg:")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    class Test\n    {\n        public void Print1()\n        {\n            Console.WriteLine("Print1 -- instance");\n        }\n        public static void Print2()\n        {\n            Console.WriteLine("Print2 -- static");\n        }\n    }\n    class Program {\n        static void Main(string[] args)\n        {\n            Test t = new Test();\n            PrintFunction pf;\n            pf = t.Print1;\n            pf += Test.Print2;\n            pf += t.Print1;\n            pf += Test.Print2;\n\n            if (null != pf)\n                pf();\n            else\n                Console.WriteLine("Delegate is empty");\n\n                // Print1 -- instance\n                // Print2 -- static\n                // Print1 -- instance\n                // Print2 -- static\n        }\n    }\n')])])]),a("h3",{attrs:{id:"调用带返回值的委托"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#调用带返回值的委托","aria-hidden":"true"}},[t._v("#")]),t._v(" 调用带返回值的委托")]),t._v(" "),a("p",[t._v("如果委托有返回值且调用列表中的方法有一个以上，会出现：")]),t._v(" "),a("ul",[a("li",[t._v("调用列表中执行到最后一个方法返回的值就是委托调用返回的值")]),t._v(" "),a("li",[t._v("调用列表中所有其他方法的返回值都会被忽略")])]),t._v(" "),a("p",[t._v("eg:")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    delegate int MyDel();\n    class Example13\n    {\n        int IntValue = 5;\n        public int Add2()\n        {\n            IntValue += 2;\n            return IntValue;\n        }\n        public int Add3()\n        {\n            IntValue += 3;\n            return IntValue;\n        }\n    }\n    class Program() {\n        static void Main() {\n            Example13 ex = new Example13();\n            MyDel mDel = ex.Add2;\n            mDel += ex.Add3;\n            mDel += ex.Add2;\n            Console.WriteLine("Value {0}", mDel()); // 12\n        }\n    }\n')])])]),a("p",[a("img",{attrs:{src:e(345),alt:""}})]),t._v(" "),a("h3",{attrs:{id:"调用带引用参数的委托"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#调用带引用参数的委托","aria-hidden":"true"}},[t._v("#")]),t._v(" 调用带引用参数的委托")]),t._v(" "),a("p",[t._v("如果委托有"),a("strong",[t._v("引用参数")]),t._v(",参数值会根据调用列表中的一个或多个方法的返回值而改变.即在调用委托列表中的下一个方法时,参数的新值会传给下一个方法.")]),t._v(" "),a("p",[t._v("eg:")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    delegate void MyDel(ref int x); // 注意是 void 类型\n    class CatchArg\n    {\n        public void Add2(ref int x)\n        {\n            x += 2;\n        }\n        public void Add3(ref int x)\n        {\n            x += 3;\n        }\n    }\n    class Program {\n        static void Main() {\n            CatchArg cg = new CatchArg();\n            MyDel mDel = cg.Add2;\n            mDel += cg.Add3;\n            mDel += cg.Add2;\n\n            int x = 5;\n            mDel(ref x);\n            Console.WriteLine("Value {0}", x); // 12\n        }\n    }\n')])])]),a("p",[a("img",{attrs:{src:e(346),alt:""}})]),t._v(" "),a("h3",{attrs:{id:"匿名方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#匿名方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 匿名方法")]),t._v(" "),a("p",[a("strong",[t._v("匿名方法")]),t._v("是在初始化委托时内联声明的方法")]),t._v(" "),a("p",[t._v("eg:")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    class Program {\n        delegate int OtherDel(int InParam);\n        static void Main() {\n            OtherDel del = delegate(int x) {\n                return x + 20;\n            }\n            Console.WriteLine("{0}", del(5)); // 25\n            Console.WriteLine("{0}", del(6)); // 26\n        }\n    }\n')])])]),a("p",[a("strong",[t._v("匿名方法用于")]),t._v(":")]),t._v(" "),a("ul",[a("li",[t._v("声明委托变量时作为初始化表达式")]),t._v(" "),a("li",[t._v("组合委托时在赋值语句右边")]),t._v(" "),a("li",[t._v("为委托增加事件时在赋值语句的右边")])]),t._v(" "),a("p",[a("strong",[t._v("基础语法")]),t._v(":")]),t._v(" "),a("ul",[a("li",[t._v("使用"),a("code",[t._v("delegate")]),t._v("关键字")]),t._v(" "),a("li",[t._v("参数列表,如果语句块没有使用任何参数且没有任何out参数则可以省略(使用空括号或省略括号),如有则需在三方面与委托匹配:\n"),a("ul",[a("li",[t._v("参数数量")]),t._v(" "),a("li",[t._v("参数类型及位置")]),t._v(" "),a("li",[t._v("修饰符")])])]),t._v(" "),a("li",[t._v("语句块,包含了匿名方法的代码")]),t._v(" "),a("li",[t._v("不需要显式声明返回值类型")]),t._v(" "),a("li",[t._v("如果参数列表含有params参数,则委托声明时指定最后一个参数为params参数,需使用params关键字,但匿名方法的参数列表省略params关键字\neg:")])]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    delegate void SomeDel(int x, params int[] y);\n    SomeDel mDel = delegate(int x, int[] y) {\n        ...\n    }\n")])])]),a("p",[a("strong",[t._v("变量和参数的作用域")]),t._v(":")]),t._v(" "),a("ul",[a("li",[t._v("参数和声明在匿名方法内部的局部变量的作用域都在实现方法的主体之内,主体结束后局部变量就会消失")]),t._v(" "),a("li",[t._v("与委托的具名方法不同,匿名方法可以访问到它们外围作用域的局部变量(也叫"),a("em",[t._v("外部变量")]),t._v(")和环境,这种方式称为"),a("em",[t._v("被方法捕获")])]),t._v(" "),a("li",[t._v("只要捕获方法还是委托的一部分,即使外部变量已经离开作用域,捕获的外部变量也会一致有效")])]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    delegate OtherDel();\n    class Program {\n        static void Main() {\n            OtherDel oDel;\n            {\n                int x = 5;\n                oDel = delegate ()\n                {\n                    Console.WriteLine("Value of x: {0}", x); //捕获x变量\n                };\n            };\n            oDel(); // 5\n        }\n    }\n')])])]),a("h3",{attrs:{id:"lambda表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lambda表达式","aria-hidden":"true"}},[t._v("#")]),t._v(" Lambda表达式")]),t._v(" "),a("p",[a("strong",[t._v("Lambda表达式")]),t._v("替代匿名方法,简化语法")]),t._v(" "),a("ul",[a("li",[t._v("删除"),a("code",[t._v("delegate")]),t._v("关键字")]),t._v(" "),a("li",[t._v("在参数列表和匿名方法主题之间放Lambda运算符=>,读作goes to")]),t._v(" "),a("li",[t._v("因为编译器能从委托声明中知道委托参数类型,Lambda表达式还能省略类型参数")]),t._v(" "),a("li",[t._v("如果语句块只包含一个返回语句,可以将语句块替换成return关键字后的表达式")]),t._v(" "),a("li",[t._v("参数列表中的参数必须在数量,类型和位置上与委托的匹配\n"),a("ul",[a("li",[t._v("参数不一定包含参数类型(隐式类型),但如果委托有ref或out参数时,此时必须标注参数类型")]),t._v(" "),a("li",[t._v("如果只有一个参数,并且是隐式类型的,周围圆括号可以被省略,否者必须有括号")]),t._v(" "),a("li",[t._v("如果没有参数,必须使用空括号")])])])]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    delegate double MyDel(int par)\n    class Program {\n        static void Main() {\n            MyDel del = delegate(int x) {\n                return x + 1;\n            };\n            // 等价于\n            MyDel del = (int x) => { return x + 1; };\n            // 等价于\n            MyDel del = x => x + 1;\n        }\n    }\n")])])]),a("h2",{attrs:{id:"十四-事件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#十四-事件","aria-hidden":"true"}},[t._v("#")]),t._v(" 十四.事件")]),t._v(" "),a("h3",{attrs:{id:"发布者和订阅者"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#发布者和订阅者","aria-hidden":"true"}},[t._v("#")]),t._v(" 发布者和订阅者")]),t._v(" "),a("ul",[a("li",[t._v("发布者: 发布某个事件的类或结构,其他的类可以在该事件发生时得到通知")]),t._v(" "),a("li",[t._v("订阅者: 注册并在事件发生时得到通知的类或结构")]),t._v(" "),a("li",[t._v("事件处理程序: 由订阅者注册到事件的方法,在发布者触发事件时执行")]),t._v(" "),a("li",[t._v("触发事件: 调用或触发事件的术语,当事件触发时,所有注册到它的方法都会依次被调用")])]),t._v(" "),a("p",[a("img",{attrs:{src:e(347),alt:""}})]),t._v(" "),a("p",[t._v("eg: 一个叫InCrementer的类,它按照某种方式进行计数")]),t._v(" "),a("ul",[a("li",[t._v("InCrementer定义了一个CountedADozen事件,每次累积到12个项时将会触发该事件")]),t._v(" "),a("li",[t._v("订阅者类Dozens和SomeOtherClass各有一个注册到CountedADozen事件的事件处理程序")]),t._v(" "),a("li",[t._v("每当触发事件时,都会调用这些处理程序")])]),t._v(" "),a("p",[a("img",{attrs:{src:e(348),alt:""}})]),t._v(" "),a("h3",{attrs:{id:"源代码组件概览"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#源代码组件概览","aria-hidden":"true"}},[t._v("#")]),t._v(" 源代码组件概览")]),t._v(" "),a("p",[a("strong",[t._v("事件")]),t._v("中使用的代码有5部分:")]),t._v(" "),a("ul",[a("li",[t._v("委托类型声明: 事件和事件处理程序必须有共同的签名和返回类型,它们通过委托类型进行描述")]),t._v(" "),a("li",[t._v("事件处理程序声明: 订阅者类中会在事件触发时执行的方法声明.它们不一定是有显式命名的方法,还可以是匿名方法或Lanbda表达式")]),t._v(" "),a("li",[t._v("事件声明: 发布者类必须声明一个订阅者类可以注册的事件成员.当声明的事件为public时,称为"),a("strong",[t._v("发布了")]),t._v("事件")]),t._v(" "),a("li",[t._v("事件注册: 订阅者必须订阅事件才能在它被触发时得到通知")]),t._v(" "),a("li",[t._v("触发事件的代码: 发布者类中"),a("strong",[t._v("触发")]),t._v("事件并导致调用注册的所有事件处理程序的代码")])]),t._v(" "),a("p",[a("img",{attrs:{src:e(349),alt:""}})]),t._v(" "),a("h3",{attrs:{id:"声明事件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#声明事件","aria-hidden":"true"}},[t._v("#")]),t._v(" 声明事件")]),t._v(" "),a("p",[t._v("是发布者(InCrementer)必须提供的事件对象(CountedADozen):")]),t._v(" "),a("ul",[a("li",[t._v("事件声明在一个类中,使用"),a("code",[t._v("event")]),t._v("关键字")]),t._v(" "),a("li",[t._v("需要委托类型名称,任何附加到事件(如注册)的处理程序都必须与委托类型的签名和返回类型匹配")]),t._v(" "),a("li",[t._v("使用"),a("code",[t._v("public")]),t._v("关键字声明,目的是其他类和结构可以在它上面注册事件处理程序")]),t._v(" "),a("li",[t._v("不能使用对象创建表达式(即 new表达式)来创建它的对象")]),t._v(" "),a("li",[t._v("可以使用"),a("code",[t._v("static")]),t._v("关键字使事件变成"),a("strong",[t._v("静态")])]),t._v(" "),a("li",[t._v("可以通过逗号分隔的列表在一个声明语句中声明一个以上的事件\n(声明事件不需要写参数, 但触发事件的参数列表必须与事件的委托类型相匹配)")])]),t._v(" "),a("p",[t._v("eg:")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    class InCrementer {\n                        ↓委托类型   ↓事件名\n        public event EventHandler CountedADozen;\n\n        public event EventHandler MyEvent1, MyEvent2, MyEvent3;\n\n        public static event EventHandler CountedADozen;\n    }\n")])])]),a("p",[a("strong",[t._v("注意,事件是成员")])]),t._v(" "),a("ul",[a("li",[t._v("事件是类或结构的成员")]),t._v(" "),a("li",[t._v("不能在一段可执行代码中声明事件,必须声明在类或结构中")]),t._v(" "),a("li",[t._v("事件成员被隐式自动初始化为null")]),t._v(" "),a("li",[t._v("事件声明需要委托类型的名字,可以声明一个委托类型或使用已存在的,如果声明一个委托类型,必须指定事件保存的方法的签名和返回类型")])]),t._v(" "),a("h3",{attrs:{id:"订阅事件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#订阅事件","aria-hidden":"true"}},[t._v("#")]),t._v(" 订阅事件")]),t._v(" "),a("p",[t._v("是订阅者向事件添加事件处理程序:")]),t._v(" "),a("ul",[a("li",[t._v("必须具有与事件的委托相同的返回类型和签名")]),t._v(" "),a("li",[t._v("使用+=运算符为事件增加事件处理程序")]),t._v(" "),a("li",[t._v("事件处理程序位于+=运算符右边\n"),a("ul",[a("li",[t._v("实例方法的名称")]),t._v(" "),a("li",[t._v("静态方法的名称")]),t._v(" "),a("li",[t._v("匿名方法")]),t._v(" "),a("li",[t._v("Lambda表达式")])])])]),t._v(" "),a("p",[t._v("eg:")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    Incrementer.CountedADozen += IncrenmenrDozensCount; // 方法形式的实例方法\n    Incrementer.CountedADozen += ClassB.CounterHandlerB; // 方法形式的静态方法\n    mc.CountedADozen += new EventHandler(cc.CounterHanlerC); // 委托形式的实例方法\n    Incrementer.CountedADozen += () => DozensCount++; // Lambda表达式形式\n    Incrementer.CountedADozen += delegate { DozensCount++; }; // 匿名方法形式\n")])])]),a("h3",{attrs:{id:"触发事件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#触发事件","aria-hidden":"true"}},[t._v("#")]),t._v(" 触发事件")]),t._v(" "),a("p",[t._v("触发事件的代码:")]),t._v(" "),a("ul",[a("li",[t._v("在触发事件之前需要和null比较,查看是否存在事件处理程序,如果事件是null,表示没有则不能执行")]),t._v(" "),a("li",[t._v("触发事件,即使用事件名称,后面跟的参数列表包含在圆括号内,参数列表必须与事件的委托类型相匹配")])]),t._v(" "),a("p",[t._v("eg:")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    if(CountedADozen != null) \n        CountedADozen(source, args); // 触发事件\n")])])]),a("p",[a("strong",[t._v("一个完整的栗子")]),t._v(":")]),t._v(" "),a("p",[a("img",{attrs:{src:e(350),alt:""}})]),t._v(" "),a("h3",{attrs:{id:"标准事件的用法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#标准事件的用法","aria-hidden":"true"}},[t._v("#")]),t._v(" 标准事件的用法")]),t._v(" "),a("p",[t._v("事件使用的标准模式的"),a("strong",[t._v("根本")]),t._v("是System命名空间声明的"),a("code",[t._v("EventHandler")]),t._v("委托类型:")]),t._v(" "),a("ul",[a("li",[t._v("第一个参数用来保存触发事件的对象的引用,由于是"),a("code",[t._v("object")]),t._v("类型,所以可以匹配任何类型的实例")]),t._v(" "),a("li",[t._v("第二个参数用来保存状态信息,指明什么类型适用于该应用程序")]),t._v(" "),a("li",[t._v("返回类型是void")]),t._v(" "),a("li",[t._v("第二个参数是"),a("code",[t._v("EventArgs")]),t._v("类的对象,它声明在"),a("code",[t._v("System")]),t._v("命名空间中.\n"),a("ul",[a("li",[t._v("因为"),a("code",[t._v("EventArgs")]),t._v("设计为不能传递任何数据,它用于不需要传递数据的事件处理程序(通常会被忽略)")]),t._v(" "),a("li",[t._v("如果希望传递数据,必须声明一个派生自"),a("code",[t._v("EventArgs")]),t._v("的类,使用合适的字段来保存需要传递的数据")])])])]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    public delegate void EventHandler(object sender, EventArgs e);\n")])])]),a("p",[t._v("eg:修改上面栗子为"),a("strong",[t._v("使用"),a("code",[t._v("EventHandler")])])]),t._v(" "),a("p",[a("img",{attrs:{src:e(351),alt:""}})]),t._v(" "),a("p",[a("strong",[t._v("通过扩展"),a("code",[t._v("EventArgs")]),t._v("来传递数据")])]),t._v(" "),a("p",[t._v("eg: 使用一个派生自"),a("code",[t._v("EventArgs")]),t._v("的类")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    public class IncrementEventArgs: EventArgs\n    {\n        public int IterationCount { get;  set; }\n    }\n    class Incrementer\n    {\n        public event EventHandler<IncrementEventArgs> CountedADozen; // 创建事件并发布\n        public void DoCount()\n        {\n            IncrementEventArgs args = new IncrementEventArgs();\n            for(int i=1; i<100; i++)\n            {\n                if (i % 12 == 0 && CountedADozen != null)\n                {\n                    args.IterationCount = i; // 设置值\n                    CountedADozen(this, args); // 传递参数\n                }\n\n            }\n        }\n    }\n    class Dozens\n    {\n        public int DozensCount { get; private set; }\n        void IncrementDozensCount(object source, IncrementEventArgs e) // 修改为自定义类\n        {\n            Console.WriteLine("Incremented at iteration: {0} in {1}", e.IterationCount, source.ToString()); // 获取参数值\n            DozensCount++;\n            \n        }\n        public Dozens(Incrementer incrementer)\n        {\n            DozensCount = 0;\n            incrementer.CountedADozen += IncrementDozensCount;\n        }\n        \n\n    }\n    class Program {\n        static void Main(string[] args)\n        {\n            Incrementer incrementer = new Incrementer();\n            Dozens dozensCounter = new Dozens(incrementer);\n            incrementer.DoCount();\n            Console.WriteLine("Number of dozens = {0}", dozensCounter.DozensCount);\n        }\n    }\n// Incremented at iteration: 12 in ClassDemo.Example.Incrementer\n// Incremented at iteration: 24 in ClassDemo.Example.Incrementer\n// Incremented at iteration: 36 in ClassDemo.Example.Incrementer\n// Incremented at iteration: 48 in ClassDemo.Example.Incrementer\n// Incremented at iteration: 60 in ClassDemo.Example.Incrementer\n// Incremented at iteration: 72 in ClassDemo.Example.Incrementer\n// Incremented at iteration: 84 in ClassDemo.Example.Incrementer\n// Incremented at iteration: 96 in ClassDemo.Example.Incrementer\n// Number of dozens = 8\n')])])]),a("p",[a("strong",[t._v("移除事件处理程序")]),t._v(": 使用"),a("code",[t._v("-=")]),t._v("运算符")]),t._v(" "),a("p",[t._v("如果一个处理程序向事件注册了多次,那么当执行命令移除处理程序时,只会将列表中该处理程序的最后一个实例移除")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    class Publisher {\n        public event Eventhandler SimpleEvent;\n        public void RaiseTheEvent() {\n            SimpleEvent(this, null);\n        }\n    }\n    class Subscriber {\n        public void MethodA(object o, EventAgrs e) {\n            Console.WriteLine("AAA");\n        }\n        public void MethodB(object o, EventAgrs e) {\n            Console.WriteLine("BBB");\n        }\n    }\n    class Program {\n        static void Main() {\n            Publisher p = new Publisher();\n            Subscriber s = new Subscriber();\n            p.SimpleEvent += s.MethodA;\n            p.SimpleEvent += s.MethodB;\n            p.RaiseTheEvent();\n            Console.WriteLine("Remove MethodB");\n            p.SimpleEvent -= s.MethodB;\n            p.RaiseTheEvent();\n        }\n    }\n    // AAA\n    // BBB\n    // Remove MethodB\n    // AAA\n')])])]),a("h3",{attrs:{id:"事件访问器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件访问器","aria-hidden":"true"}},[t._v("#")]),t._v(" 事件访问器")]),t._v(" "),a("p",[a("code",[t._v("+=")]),t._v("和"),a("code",[t._v("-=")]),t._v("是事件允许的唯二运算符,但这些运算符有预定义的行为,我们可以通过修改这些运算符的行为,让事件执行任何我们希望的自定义代码,要改变这两个运算符的操作,可以"),a("strong",[t._v("为事件定义事件访问器")]),t._v(":")]),t._v(" "),a("ul",[a("li",[t._v("有两个访问器: add和remove")]),t._v(" "),a("li",[t._v("声明是将访问器看上去和声明一个属性差不多")]),t._v(" "),a("li",[t._v("两个访问器都有叫做value的隐式值参数,它接受实例或静态方法的引用")]),t._v(" "),a("li",[t._v("声明事件访问器之后,事件不包含任何内嵌委托对象,需要我们自己实现来来存储和移除事件注册的方法")]),t._v(" "),a("li",[t._v("事件访问器表现为void方法,不能包含返回值的return语句")])]),t._v(" "),a("h2",{attrs:{id:"十五-接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#十五-接口","aria-hidden":"true"}},[t._v("#")]),t._v(" 十五.接口")]),t._v(" "),a("h3",{attrs:{id:"什么是接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是接口","aria-hidden":"true"}},[t._v("#")]),t._v(" 什么是接口")]),t._v(" "),a("p",[a("strong",[t._v("接口")]),t._v("是指定一组函数成员而不实现它们的引用类型,只能类和结构来实现接口")]),t._v(" "),a("p",[t._v("eg: 使用接口IInfo使PrintInfo方法用于多个类")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    interface IInfo\n    {\n        string GetName();\n        string GetAge();\n    }\n    class CA: IInfo\n    {\n        public string Name;\n        public int Age;\n        public string GetName()\n        {\n            return Name;\n        }\n        public string GetAge()\n        {\n            return Age.ToString();\n        }\n    }\n    class CB: IInfo\n    {\n        public string First;\n        public string Last;\n        public double PersonsAge;\n        public string GetName()\n        {\n            return First + " " + Last;\n        }\n        public string GetAge()\n        {\n            return PersonsAge.ToString();\n        }\n    }\n    class Program {\n        static void PrintInfo(IInfo item)\n        {\n            Console.WriteLine("Name: {0}, Age: {1}", item.GetName(), item.GetAge());\n        }\n        static void Main(string[] args)\n            {\n            CA a = new CA() { Age = 35, Name = "John Doe" };\n            CB b = new CB() { First = "Jane", Last = "Doe", PersonsAge = 33 };\n            PrintInfo(a); // Name: John Doe, Age: 35\n            PrintInfo(b); // Name: Jane Doe, Age: 33\n            }\n    }\n')])])]),a("p",[t._v("eg: 2")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    class CC: IComparable\n    {\n        public int TheValue;\n        public int CompareTo(object obj)\n        {\n            CC c = (CC)obj; // 暂时没明白这一行代表什么\n            if (this.TheValue < c.TheValue) return -1;\n            if (this.TheValue > c.TheValue) return 1;\n            return 0;\n        }\n    }\n    class Program {\n        static void PrintOut(string s, CC[] mc)\n        {\n            Console.Write(s);\n            foreach (var m in mc)\n                Console.Write("{0} ", m.TheValue);\n            Console.WriteLine("");\n        }\n        static void Main(string[] args)\n            {\n            var myInt = new[] { 20, 4, 16, 9, 2 };\n            CC[] cArr = new CC[5]; // 创建一个CC类型的数组\n            for(int i = 0; i< 5; i++ )\n            {\n                cArr[i] = new CC(); // 创建类对象 即实例化每一个元素\n                cArr[i].TheValue = myInt[i];\n            }\n            PrintOut("Initial Order: ", cArr); // Initial Order: 20 4 16 9 2\n            Array.Sort(cArr);\n            PrintOut("Sorted Order: ", cArr); // Sorted Order: 2 4 9 16 20\n            }\n    }\n')])])]),a("h3",{attrs:{id:"声明接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#声明接口","aria-hidden":"true"}},[t._v("#")]),t._v(" 声明接口")]),t._v(" "),a("p",[a("strong",[t._v("声明接口")]),t._v(":")]),t._v(" "),a("ul",[a("li",[t._v("声明接口不能包含数据成员和静态成员")]),t._v(" "),a("li",[t._v("只能包含以下类型的非静态成员函数: 方法、属性、事件、索引器")]),t._v(" "),a("li",[t._v("以上函数成员的声明不能包含任何实现代码,必须以分号结尾")]),t._v(" "),a("li",[t._v("按照惯例,接口名称必须从大写的"),a("strong",[t._v("I")]),t._v("开始")]),t._v(" "),a("li",[t._v("与类和结构一样,接口声明还可以分隔成分部接口声明")]),t._v(" "),a("li",[t._v("接口声明可以由任何的访问修饰符如: public、protected、internal或private")]),t._v(" "),a("li",[t._v("但接口的成员是"),a("strong",[t._v("隐式public")]),t._v(",不允许有任何访问修饰符")])]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    interface IMyInterface {\n        int DoStuff (int nVar1, long lVar2);\n        double DoOtherStuff(string s, long x);\n    }\n")])])]),a("h3",{attrs:{id:"实现接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现接口","aria-hidden":"true"}},[t._v("#")]),t._v(" 实现接口")]),t._v(" "),a("p",[a("strong",[t._v("只有类和结构能实现接口")]),t._v(",且类和结构必须:")]),t._v(" "),a("ul",[a("li",[t._v("在基类列表中包含接口名称")]),t._v(" "),a("li",[t._v("为每一个接口的成员提供实现")]),t._v(" "),a("li",[t._v("基类列表中除了接口外的基类名称必须放在所有接口之前")])]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    class Derived: MyBaseClass, IIfc1, IEnumerable, IComparable {\n        ...\n    }\n")])])]),a("h3",{attrs:{id:"接口是引用类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#接口是引用类型","aria-hidden":"true"}},[t._v("#")]),t._v(" 接口是引用类型")]),t._v(" "),a("p",[a("strong",[t._v("接口是引用类型")]),t._v(", 不能直接通过类对象的成员访问接口, 但可以通过"),a("strong",[t._v("把类对象引用强制转换为接口类型")]),t._v("来获取指向"),a("strong",[t._v("接口的引用")])]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('     ↓接口        ↓转换为接口\n    IIfc1 ifc = (IIfc1) mc;          // 获取接口的引用\n          ↑接口引用      ↑类对象引用\n\n    ifc.PrintOut("interface");       // 使用接口的引用调用方法\n')])])]),a("p",[t._v("eg:")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    interface IIfc1\n    {\n        void PrintOut(string s);\n    }\n    class CD: IIfc1\n    {\n        public void PrintOut(string s)\n        {\n            Console.WriteLine("Calling through: {0}", s);\n        }\n    }\n    class Program {\n        static void Main(string[] args)\n            {\n            CD cd = new CD();\n            cd.PrintOut("object"); // Calling through: object\n            IIfc1 ifc = (IIfc1)cd; // 将类对象的引用转换为接口类型的引用\n            ifc.PrintOut("interface"); // Calling through: interface\n            }\n    }\n')])])]),a("h3",{attrs:{id:"接口和as运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#接口和as运算符","aria-hidden":"true"}},[t._v("#")]),t._v(" 接口和as运算符")]),t._v(" "),a("p",[t._v("如果将类对象的引用强制转换为"),a("strong",[t._v("类未实现的接口")]),t._v("的引用,强制转换操作会抛出异常,但使用"),a("code",[t._v("as")]),t._v("运算符可以避免这个问题:")]),t._v(" "),a("ul",[a("li",[t._v("如果类实现了接口, 表达式返回指向接口的引用")]),t._v(" "),a("li",[t._v("如果类未实现接口, 表达式返回 null 而不是抛出异常")])]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    // IIfc1 ifc = (IIfc1) mc;\n    IIfc1 ifc = mc as IIfc1;\n")])])]),a("h3",{attrs:{id:"实现多个接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现多个接口","aria-hidden":"true"}},[t._v("#")]),t._v(" 实现多个接口")]),t._v(" "),a("ul",[a("li",[t._v("类或结构可以实现任意数量的接口")]),t._v(" "),a("li",[t._v("所有实现的接口必须列在基类列表并以逗号分隔(如果有基类名称, 必须放在基类后面)")])]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    interface IDataRetrieve\n    {\n        int GetData();\n    }\n    interface IDataStore\n    {\n        void SetData(int x);\n    }\n    class MyDataInt: IDataRetrieve, IDataStore\n    {\n        int Mem1;\n        public int GetData()\n        {\n            return Mem1;\n        }\n        public void SetData(int x)\n        {\n            Mem1 = x;\n        }\n    }\n    class Program {\n        static void Main(string[] args)\n            {\n            MyDataInt data = new MyDataInt();\n            data.SetData(5);\n            Console.WriteLine("Value = {0}", data.GetData()); // Value = 5\n            }\n    }\n')])])]),a("h3",{attrs:{id:"实具有重复成员的接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实具有重复成员的接口","aria-hidden":"true"}},[t._v("#")]),t._v(" 实具有重复成员的接口")]),t._v(" "),a("p",[t._v("如果类实现的多个接口中, 有两个接口成员都有相同的签名和返回类型, 那么类可以"),a("strong",[t._v("实现单个成员")]),t._v("来满足所有包含重复成员的接口:")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    interface IIfc1 {\n        void PrintOut(string s);\n    }\n    interface IIfc2 {\n        void PrintOut(string s);\n    }\n    class MyClass: IIfc1, IIfc2\n    {\n        public void PrintOut(string s) {\n            Console.WriteLine("Calling through: {0}", s);\n        }\n    }\n')])])]),a("h3",{attrs:{id:"多个接口的引用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多个接口的引用","aria-hidden":"true"}},[t._v("#")]),t._v(" 多个接口的引用")]),t._v(" "),a("p",[t._v("如果类实现了多个接口, 可以获取每一个接口的独立引用:")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    interface IIfc1 {\n        void PrintOut(string s);\n    }\n    interface IIfc2 {\n        void PrintOut(string s);\n    }\n    class CF: IIfc1, IIfc2\n    {\n        public void PrintOut(string s) {\n            Console.WriteLine("Calling through: {0}", s);\n        }\n    }\n    class Program\n    {\n        static void Main(string[] args)\n            {\n            CF cf = new CF();\n            IIfc1 ifc1 = cf as IIfc1;\n            IIfc2 ifc2 = cf as IIfc2;\n            cf.PrintOut("object");       // Calling through: object\n            ifc1.PrintOut("interface1"); // Calling through: interface1\n            ifc2.PrintOut("interface2"); // Calling through: interface2\n            }\n    }\n')])])]),a("h3",{attrs:{id:"派生成员实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#派生成员实现","aria-hidden":"true"}},[t._v("#")]),t._v(" 派生成员实现")]),t._v(" "),a("p",[t._v("实现接口的类可以从它的基类"),a("strong",[t._v("继承")]),t._v("实现的代码:")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    interface IIfc1{\n        void PrintOut(string s);\n    }\n    class BaseClass\n    {\n        public void PrintOut(string s)\n        {\n            Console.WriteLine("Calling through: {0}", s);\n        }\n    }\n    class DerviedClass : BaseClass, IIfc1\n    { }\n    class Program \n    {\n        static void Main(string[] args)\n        {\n            DerviedClass dc = new DerviedClass();\n            dc.PrintOut("object"); // Calling through: object\n        }\n    }\n')])])]),a("p",[a("img",{attrs:{src:e(352),alt:""}})]),t._v(" "),a("h3",{attrs:{id:"显式接口成员实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#显式接口成员实现","aria-hidden":"true"}},[t._v("#")]),t._v(" 显式接口成员实现")]),t._v(" "),a("p",[t._v("如果希望每一个接口分离实现，可以创建"),a("strong",[t._v("显式接口成员实现")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("与所有接口实现相似")]),t._v(" "),a("li",[t._v("使用"),a("strong",[t._v("限定接口名称")]),t._v("声明，由接口名称和成员名称以及它们中间的点分隔符号构成")])]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    class MyClass : IIfc1, IIfc2\n    {\n        // 注意 没有类级别的实现\n        void IIfc1.PrintOut(string s) {\n            // 显式接口成员实现\n        }\n        void IIFc2.PrintOut(string s) {\n            // 显式接口成员实现\n        }\n    }\n")])])]),a("p",[a("img",{attrs:{src:e(353),alt:""}})]),t._v(" "),a("p",[t._v("有"),a("strong",[t._v("三种")]),t._v("实现场景：")]),t._v(" "),a("ul",[a("li",[t._v("类级别实现")]),t._v(" "),a("li",[t._v("显式接口成员实现")]),t._v(" "),a("li",[t._v("类级别和显式接口成员实现")])]),t._v(" "),a("p",[a("strong",[t._v("显式接口成员实现只能通过指向接口的引用来访问")]),t._v("，其他的类成员都不可以直接访问它们")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    class MyClass: IIfc1\n    {\n        void IIfc1.PrintOut(string s) {\n            Console.WriteLine("IIfc1");\n        }\n        public void Method1() {\n            PrintOut("..."); // 编译错误 不可直接访问\n            this.PrintOut("..."); // 编译错误\n            ((IIfc1)this).PrintOut("..."); // IIfc1\n               ↑转换为接口的引用\n        }\n    }\n')])])]),a("h3",{attrs:{id:"接口可以继承接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#接口可以继承接口","aria-hidden":"true"}},[t._v("#")]),t._v(" 接口可以继承接口")]),t._v(" "),a("p",[t._v("接口本身可以从一个或多个接口"),a("strong",[t._v("继承")])]),t._v(" "),a("ul",[a("li",[t._v("指定某个接口继承其他接口，应在接口声明中把基接口以逗号分隔的列表形式放在接口名称的冒号之后")]),t._v(" "),a("li",[t._v("与类不同，类在继承接口时，基类列表中只能有一个类名，而接口可以在基接口列表中由任意多个接口\n"),a("ul",[a("li",[t._v("列表中的接口本身也可以继承其他接口")]),t._v(" "),a("li",[t._v("结果接口包含它声明的所有接口和所有基接口成员")])])])]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    interface IDataRetrieve\n    {\n        int GetData();\n    }\n    interface IDataStore\n    {\n        void SetData(int x);\n    }\n    interface IDataIO : IDataRetrieve, IDataStore\n    {}\n    class MyDataIO: IDataIO\n    {\n        int nPrivateData;\n        public int GetData()\n        {\n            return nPrivateData;\n        }\n        public void SetData(int x)\n        {\n            nPrivateData = x;\n        }\n    }\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            MyDataIO md = new MyDataIO();\n            md.SetData(5);\n            Console.WriteLine("{0}", md.GetData());\n        }\n    }\n')])])]),a("p",[a("img",{attrs:{src:e(354),alt:""}})]),t._v(" "),a("h3",{attrs:{id:"不同类实现同一个接口的示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不同类实现同一个接口的示例","aria-hidden":"true"}},[t._v("#")]),t._v(" 不同类实现同一个接口的示例")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    interface ILiveBirth\n    {\n        string BabyCalled();\n    }\n    class Animal\n    {\n\n    }\n    class Cat: Animal, ILiveBirth\n    {\n        string ILiveBirth.BabyCalled()\n        {\n            return "kitten";\n        }\n    }\n    class Dog: Animal, ILiveBirth\n    {\n        string ILiveBirth.BabyCalled()\n        {\n            return "puppy";\n        }\n    }\n    class Bird: Animal\n    {\n    }\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Animal[] animalArray = new Animal[3];\n            animalArray[0] = new Cat();\n            animalArray[1] = new Bird();\n            animalArray[2] = new Dog();\n            foreach( Animal a in animalArray)\n            {\n                ILiveBirth b = a as ILiveBirth;\n                if(b != null)\n                {\n                    Console.WriteLine("Baby is called: {0}", b.BabyCalled());\n                    // Baby is called: kitten\n                    // Baby is called: puppy\n                }\n            }\n        }\n    }\n')])])]),a("p",[a("img",{attrs:{src:e(355),alt:""}})]),t._v(" "),a("h2",{attrs:{id:"十六-转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#十六-转换","aria-hidden":"true"}},[t._v("#")]),t._v(" 十六.转换")]),t._v(" "),a("h3",{attrs:{id:"什么是转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是转换","aria-hidden":"true"}},[t._v("#")]),t._v(" 什么是转换")]),t._v(" "),a("p",[a("strong",[t._v("类型转换")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("转换是接受一个类型的值并使用它作为另一个类型的等价值的过程")]),t._v(" "),a("li",[t._v("转换后的值应该和源值一样的，但其类型为目标类型")])]),t._v(" "),a("p",[t._v("eg:")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    short varl = 5;\n    sbyte var2 = 10;\n    var2 = (sbyte) var1; // 把 var1 值强制转换为sbyte类型\n")])])]),a("p",[a("img",{attrs:{src:e(356),alt:""}})]),t._v(" "),a("h3",{attrs:{id:"隐式转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#隐式转换","aria-hidden":"true"}},[t._v("#")]),t._v(" 隐式转换")]),t._v(" "),a("p",[a("strong",[t._v("隐式转换")]),t._v("是指有些类型的转化不会丢失数据或精度：")]),t._v(" "),a("ul",[a("li",[t._v("语言会自动做这些转换，叫做隐式转换")]),t._v(" "),a("li",[t._v("从位数更少的源转换为位数更多的目标类型时，目标中多出来的位需要用0或1填充")]),t._v(" "),a("li",[t._v("当从更小的无符号类型转换为更大的无符号类型时，目标类型多出来的最高位都以0进行填充，这叫做"),a("strong",[t._v("零扩展")])]),t._v(" "),a("li",[t._v("对于有符号类型的转换，额外的高位用源表达式的符号位进行填充，保证被转换值得正确符号和大小，这叫做"),a("strong",[t._v("符号扩展")])])]),t._v(" "),a("p",[a("img",{attrs:{src:e(357),alt:""}}),t._v(" "),a("img",{attrs:{src:e(358),alt:""}})]),t._v(" "),a("h3",{attrs:{id:"显式转换和强制转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#显式转换和强制转换","aria-hidden":"true"}},[t._v("#")]),t._v(" 显式转换和强制转换")]),t._v(" "),a("p",[t._v("如果要把长类型转换为短类型，目标类型很可能无法在不损失数据的情况下提供源值")]),t._v(" "),a("p",[a("img",{attrs:{src:e(359),alt:""}})]),t._v(" "),a("p",[t._v("对于预定义类型，在那些从源类型到目标类型不会发生数据丢失的情况下，C#会自动将一个数据类型转换为另一个数据类型；如果会出现数据丢失，语言是不会提供自动转换，必须使用"),a("strong",[t._v("显式转换")]),t._v("。也叫做"),a("strong",[t._v("强制转换表达式")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("一对圆括号，里面时目标类型")]),t._v(" "),a("li",[t._v("目标类型后是源表达式")])]),t._v(" "),a("p",[t._v("注意：使用强制转换表达式意味着要承担执行操作可能引起丢失数据的后果")]),t._v(" "),a("p",[t._v("eg: 将两个ushort类型的值转换为byte类型")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    ushort sh1 = 10;\n    byte sb1 = (byte) sh1;\n    Console.WriteLine("sb: {0} = 0x{0:X}", sb1); // sb: 10 = 0xA\n\n    ushort sh2 = 1365;\n    byte sb2 = (byte) sh2;\n    Console.WriteLine("sb: {0} = 0x{0:X}", sb2); // sb: 85 = 0x55\n')])])]),a("p",[a("img",{attrs:{src:e(360),alt:""}})]),t._v(" "),a("h3",{attrs:{id:"转换的类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#转换的类型","aria-hidden":"true"}},[t._v("#")]),t._v(" 转换的类型")]),t._v(" "),a("p",[a("strong",[t._v("转换的类型")]),t._v("有很多种：")]),t._v(" "),a("ul",[a("li",[t._v("除了标准转换，还可以为自定义类型定义隐式转换和显式转换")]),t._v(" "),a("li",[t._v("还有一个预定义的转换类型，叫做"),a("strong",[t._v("装箱")]),t._v("，可以将任何值类型转换为：\n"),a("ul",[a("li",[t._v("object类型")]),t._v(" "),a("li",[t._v("System.ValueType类型")])])]),t._v(" "),a("li",[t._v("拆箱可以将一个装箱的值转换为原始类型")])]),t._v(" "),a("p",[a("img",{attrs:{src:e(361),alt:""}})]),t._v(" "),a("h3",{attrs:{id:"数字的转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数字的转换","aria-hidden":"true"}},[t._v("#")]),t._v(" 数字的转换")]),t._v(" "),a("p",[a("img",{attrs:{src:e(362),alt:""}})]),t._v(" "),a("p",[t._v("任何数字类型都可以转换为其他数字类型")]),t._v(" "),a("p",[a("strong",[t._v("1. 隐式数字转换")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("少位的数字类型可以隐式转换为多位的数字类型")]),t._v(" "),a("li",[t._v("下图中有路径的都是隐式转换，无路径的必须使用显式转换")])]),t._v(" "),a("p",[a("img",{attrs:{src:e(363),alt:""}})]),t._v(" "),a("p",[t._v("对于整数类型，C#提供了选择运行时是否在进行类型转换时"),a("strong",[t._v("检测结果溢出")]),t._v("的能力，通过使用"),a("code",[t._v("checked")]),t._v("和"),a("code",[t._v("unchecked")]),t._v("运算符实现：")]),t._v(" "),a("ul",[a("li",[t._v("代码片段是否被检查称作"),a("strong",[t._v("溢出检测上下文")]),t._v(" "),a("ul",[a("li",[t._v("如果指定一个表达式或一段代码为checked，CLR会在转换溢出时抛出一个OverFlowException异常")]),t._v(" "),a("li",[t._v("如果代码是unchecked，转换会一直执行而不管是否会溢出")])])]),t._v(" "),a("li",[t._v("默认情况下溢出检测上下文是"),a("strong",[t._v("unchecked")])])]),t._v(" "),a("p",[t._v("eg：")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    ushort sh = 2000;\n    byte sb;\n    sb = unchecked((byte) sh); // 大多数位丢失了 会进行显式转换不报错\n    Console.WriteLine("sb: {0}", sb);\n \n    sb = checked((byte) sh); // 会抛出OverFlowException异常\n    Console.WriteLine("sb: {0}", sb);\n')])])]),a("p",[a("code",[t._v("checked")]),t._v("和"),a("code",[t._v("unchecked")]),t._v("运算符用于"),a("strong",[t._v("圆括号")]),t._v("内的单个表达式，而"),a("code",[t._v("checked")]),t._v("和"),a("code",[t._v("unchecked")]),t._v("语句控制的是"),a("strong",[t._v("一块代码中的所有转换")]),t._v("：")]),t._v(" "),a("p",[t._v("eg:")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    byte sb;\n    ushort sh = 2000;\n    unchecked {\n        sb = unchecked((byte) sh);\n        Console.WriteLine("sb: {0}", sb);\n    }\n    checked {\n        sb = checked((byte) sh);\n        Console.WriteLine("sb: {0}", sb);    \n    }\n')])])]),a("p",[a("strong",[t._v("2. 显式数字转换")])]),t._v(" "),a("p",[a("img",{attrs:{src:e(364),alt:""}})]),t._v(" "),a("p",[t._v("2-1. "),a("strong",[t._v("整数")]),t._v("类型到"),a("strong",[t._v("整数")]),t._v("类型")]),t._v(" "),a("p",[a("img",{attrs:{src:e(365),alt:""}})]),t._v(" "),a("p",[t._v("2-2. "),a("strong",[t._v("float或double")]),t._v("类型到"),a("strong",[t._v("整数")]),t._v("类型")]),t._v(" "),a("p",[a("img",{attrs:{src:e(366),alt:""}})]),t._v(" "),a("p",[t._v("2-3. "),a("strong",[t._v("decimal")]),t._v("到"),a("strong",[t._v("整数")]),t._v("类型")]),t._v(" "),a("p",[a("img",{attrs:{src:e(367),alt:""}})]),t._v(" "),a("p",[t._v("2-4. "),a("strong",[t._v("double")]),t._v("到"),a("strong",[t._v("float")])]),t._v(" "),a("ul",[a("li",[t._v("float类型值占32位，double类型值占64位")])]),t._v(" "),a("p",[a("img",{attrs:{src:e(368),alt:""}})]),t._v(" "),a("p",[t._v("2-5. "),a("strong",[t._v("float或double")]),t._v("类型到"),a("strong",[t._v("decimal")])]),t._v(" "),a("p",[a("img",{attrs:{src:e(369),alt:""}})]),t._v(" "),a("p",[t._v("2-6. "),a("strong",[t._v("decimal")]),t._v("到"),a("strong",[t._v("float或double")])]),t._v(" "),a("ul",[a("li",[t._v("从decimal类型到float类型总会成功，但可能会损失精度")])]),t._v(" "),a("p",[a("img",{attrs:{src:e(370),alt:""}})]),t._v(" "),a("h3",{attrs:{id:"引用转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#引用转换","aria-hidden":"true"}},[t._v("#")]),t._v(" 引用转换")]),t._v(" "),a("p",[t._v("引用类型的对象由内存中的两部分组成：引用和数据")]),t._v(" "),a("ul",[a("li",[t._v("由引用保存的那部分信息是它指向的数据类型")]),t._v(" "),a("li",[a("strong",[t._v("引用类型转换")]),t._v("接受源引用并返回一个指向堆中同一位置的引用，但是把引用“标记”为其他类型")])]),t._v(" "),a("p",[t._v("eg:")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    class A {\n        public int Field1;\n    }\n    class B: A {\n        public int Field2;\n    }\n    class Program {\n        static void Main() {\n            B myVar1 = new B();\n            A myVar2 = (A) myVar1; // 引用转换\n            Console.WriteLine("{0}", myVar2.Field1); // 正常\n            Console.WriteLine("{0}", myVar2.Field2); // 编译错误 Field2对myVar2不可见\n        }\n    }\n')])])]),a("p",[a("img",{attrs:{src:e(371),alt:""}})]),t._v(" "),a("p",[a("strong",[t._v("隐式引用转换")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("所有引用类型可以被隐式转换为object类型")]),t._v(" "),a("li",[t._v("任何类型可以隐式转换到它继承的接口")]),t._v(" "),a("li",[t._v("类可以隐式转换到：\n"),a("ul",[a("li",[t._v("它继承链中的任何类（如上例中的B到A）")]),t._v(" "),a("li",[t._v("它实现的任何接口")])])]),t._v(" "),a("li",[t._v("委托可以隐式转换到下图中的.NET BCL类和接口")]),t._v(" "),a("li",[t._v("Array数组，其中元素是Ts类型的，可以隐式转换到\n"),a("ul",[a("li",[t._v("下图中的.NET BCL类和接口")]),t._v(" "),a("li",[t._v("另一个数组ArrayT，其中元素是Tt类型，满足以下条件：\n"),a("ul",[a("li",[t._v("两个数组维度一样")]),t._v(" "),a("li",[t._v("元素类型Ts和Tt都是引用类型，不是值类型")]),t._v(" "),a("li",[t._v("在类型Ts和Tt中存在隐式转换\n"),a("img",{attrs:{src:e(372),alt:""}})])])])])])]),t._v(" "),a("p",[a("strong",[t._v("显式引用转换")]),t._v("：从一个普通类型到一个更精确类型的引用转换")]),t._v(" "),a("ul",[a("li",[t._v("显式转换包括：\n"),a("ul",[a("li",[t._v("从object到任何引用类型的转换")]),t._v(" "),a("li",[t._v("从基类到从它继承的类的转换")])])])]),t._v(" "),a("p",[t._v("eg:")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    class A {\n        public int Field1;\n    }\n    class B: A {\n        public int Field2;\n    }\n    class Program {\n        static void Main() {\n            A myVar1 = new A();\n            B myVar2 = (B) myVar1; // 不正确的强制转换 抛出InvalidCastException异常\n            Console.WriteLine("{0}", myVar2.Field2); // 错误，Field2不在内存中\n        }\n    }\n')])])]),a("p",[t._v("进行"),a("strong",[t._v("有效显式引用转换")]),t._v("：有三种")]),t._v(" "),a("ul",[a("li",[t._v("从衍生类到基类，没必要进行显式转换，因为会自动进行隐式转换（如B到A）")]),t._v(" "),a("li",[t._v("源引用是null，此时从基类到衍生类还是允许的，不会报错（如A到B）")]),t._v(" "),a("li",[t._v("由源引用指向的实际数据可以被安全地进行隐式转换，见下例")])]),t._v(" "),a("p",[t._v("eg:")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    class A {\n        public int Field1;\n    }\n    class B: A {\n        public int Field2;\n    }\n    class Program {\n        B myVar1 = new B();\n        A myVar2 = myVar1; // 将B类引用myVar1隐式转换为A类\n        B myVar3 = (B) myVar2; // 该转换是允许地，因为数据是B类型的\n    }\n")])])]),a("p",[a("img",{attrs:{src:e(373),alt:""}})]),t._v(" "),a("h3",{attrs:{id:"装箱转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#装箱转换","aria-hidden":"true"}},[t._v("#")]),t._v(" 装箱转换")]),t._v(" "),a("p",[t._v("包括值类型在内的所有C#类型都派生自object类型，而值类型是高效轻量的类型，默认情况下堆上不包括它们的对象组件。")]),t._v(" "),a("p",[a("strong",[t._v("装箱")]),t._v("是一种隐式转换，它接受值类型的值，根据这个值在堆上创建一个完整的引用类型对象并返回对象引用")]),t._v(" "),a("p",[t._v("eg:")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("int i = 12; object oi = null; oi = i;")])]),t._v(" "),a("li",[t._v("我们希望把变量i的值赋给oi，但oi是引用类型的变量，我们必须在堆上分配一个对象的引用，然而变量i是值类型，不存在指向堆上某对象的引用")]),t._v(" "),a("li",[t._v("系统将i的值"),a("strong",[t._v("装箱")]),t._v("：\n"),a("ul",[a("li",[t._v("在堆上创建了int类型的对象")]),t._v(" "),a("li",[t._v("将i的值复制到int对象")]),t._v(" "),a("li",[t._v("返回int对象的引用，让oi作为引用保存\n"),a("img",{attrs:{src:e(374),alt:""}})])])])]),t._v(" "),a("p",[a("strong",[t._v("装箱")]),t._v("是创建副本，并不是在原始项上进行操作，装箱返回的是值的"),a("strong",[t._v("引用类型副本")]),t._v("，装箱后，该值有两份副本————原始值类型和引用类型副本，每一个都可以独立操作")]),t._v(" "),a("p",[t._v("eg：")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    int i = 10;\n    object oi = i;\n    Console.WriteLine("i: {0}, oi: {1}", i, oi); // i: 10 oi: 10\n\n    i = 12;\n    oi = 15;\n    Console.WriteLine("i: {0}, oi: {1}", i, oi); // i: 12 oi: 15\n')])])]),a("p",[a("img",{attrs:{src:e(375),alt:""}})]),t._v(" "),a("p",[a("strong",[t._v("装箱是值类型到引用类型的隐式转换")]),t._v("：任何值类型ValueTypeS都可以被隐式转换为object类型、System.ValueType或InterfaceT（如果ValueTypeS实现了InterfaceT）")]),t._v(" "),a("h3",{attrs:{id:"拆箱转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#拆箱转换","aria-hidden":"true"}},[t._v("#")]),t._v(" 拆箱转换")]),t._v(" "),a("p",[a("strong",[t._v("拆箱")]),t._v("是把装箱后的对象转换回值类型的过程")]),t._v(" "),a("ul",[a("li",[t._v("拆箱是"),a("strong",[t._v("显式转换")])]),t._v(" "),a("li",[t._v("系统把值拆箱成ValueTypeT时执行以下步骤：\n"),a("ul",[a("li",[t._v("它检测到要拆箱的对象实际是ValueTypeT的装箱值")]),t._v(" "),a("li",[t._v("它把对象的值复制到变量")])])])]),t._v(" "),a("p",[t._v("eg:")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('static void Main() {\n    int i = 10;\n    onject oi = i; // 装箱\n    int j = (int) oi; // 拆箱\n    Console.WriteLine("i: {0}, oi: {1}, j: {2}", i, oi, j); // 10 10 10\n}\n')])])]),a("h3",{attrs:{id:"用户自定义转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用户自定义转换","aria-hidden":"true"}},[t._v("#")]),t._v(" 用户自定义转换")]),t._v(" "),a("p",[t._v("除了标准转换，还可以为类和结构定义隐式转换和显式转换，即"),a("strong",[t._v("用户自定义转换")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("使用"),a("code",[t._v("implicit")]),t._v("（隐式）和"),a("code",[t._v("explicit")]),t._v("（显式）关键字")]),t._v(" "),a("li",[t._v("需要"),a("code",[t._v("public")]),t._v("和"),a("code",[t._v("static")]),t._v("修饰符")]),t._v(" "),a("li",[t._v("需要"),a("code",[t._v("operator")]),t._v("运算符")])]),t._v(" "),a("p",[t._v("eg:")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    public static implicit operator int(Person p) {\n        return p.age;\n    }\n")])])]),a("p",[t._v("用户自定义转换的"),a("strong",[t._v("约束")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("只可以为类和结构定义用户自定义转换")]),t._v(" "),a("li",[t._v("不能重定义标准隐式转换或显式转换")]),t._v(" "),a("li",[t._v("对于源类型S和目标类型T，如下命题为真：\n"),a("ul",[a("li",[t._v("S和T必须是不同类型")]),t._v(" "),a("li",[t._v("S和T不能通过继承关联，即S不能继承T，T也不能继承S")]),t._v(" "),a("li",[t._v("S和T都不能是接口类型或object类型")]),t._v(" "),a("li",[t._v("转换运算符必须是S或T的成员")])])]),t._v(" "),a("li",[t._v("对于相同源和目标类型，不能声明隐式或显式转换")])]),t._v(" "),a("p",[t._v("eg:")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    class Person\n    {\n        public string Name;\n        public int Age;\n        public Person (string name, int age)\n        {\n            Name = name;\n            Age = age;\n        }\n        public static implicit operator int(Person p)\n        {\n            return p.Age;\n        }\n        public static implicit operator Person(int i)\n        {\n            return new Person("Nemo", i);\n        }\n    }\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Person bill = new Person("bill", 25);\n            int age = bill;\n            Console.WriteLine("Person Info: {0}, {1}", bill.Name, age); // Person Info: bill 25\n            Person anon = 35;\n            Console.WriteLine("Person Info: {0}, {1}", anon.Name, anon.Age); //Person Info: Nemo 35\n        }\n    }\n\n')])])]),a("p",[a("strong",[t._v("注意")]),t._v("，如果使用"),a("code",[t._v("explicit")]),t._v("运算符定义相同的转换，则需要强制转换表达式来进行转换：")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    public static explicit operator int(Person p) {\n        return p.Age;\n    }\n    static void Main() {\n        ...\n        int age = (int) bill; // 使用强制转换表达式\n    }\n")])])]),a("p",[a("strong",[t._v("用户自定义转换")]),t._v("在完整转换中最多可以有三个步骤：")]),t._v(" "),a("ul",[a("li",[t._v("预备标准转换")]),t._v(" "),a("li",[t._v("用户自定义转换")]),t._v(" "),a("li",[t._v("后续标准转换")])]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    class Employee : Person { }\n    class Person\n    {\n        public string Name;\n        public int Age;\n        public static implicit operator int(Person p)\n        {\n            return p.Age;\n        }\n    }\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Employee bill = new Employee();\n            bill.Name = "William";\n            bill.Age = 25;\n            float fVar = bill;\n            Console.WriteLine("Person Info: {0}, {1}", bill.Name, fVar); // Person Info: William 25\n        }\n    }\n')])])]),a("p",[a("img",{attrs:{src:e(376),alt:""}})]),t._v(" "),a("h3",{attrs:{id:"is运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is运算符","aria-hidden":"true"}},[t._v("#")]),t._v(" is运算符")]),t._v(" "),a("p",[t._v("通过使用"),a("strong",[t._v("is")]),t._v("运算符来检查转换是否会成功完成，从而避免抛出异常，语法如下：")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Expr is TargetType // 返回 bool\n ↑源表达式     ↑目标类型\n")])])]),a("p",[t._v("如果Expr可以通过以下方式成功转换为目标类型，则运算符返回true：")]),t._v(" "),a("ul",[a("li",[t._v("引用转换")]),t._v(" "),a("li",[t._v("装箱转换")]),t._v(" "),a("li",[t._v("拆箱转换")]),t._v(" "),a("li",[t._v("不能用于用户自定义转换\neg:")])]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    class Employee : Person { }\n    class Person\n    {\n        public string Name = "Anonymous";\n        public int Age = 25;\n    }\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Employee bill = new Employee();\n            Person p;\n            if (bill is Person) {\n                p = bill;\n                Console.WriteLine("Person Info: {0}, {1}", p.Name, p.Age); // Person Info: Anonymous 25\n            }\n            \n        }\n    }\n')])])]),a("h3",{attrs:{id:"as运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#as运算符","aria-hidden":"true"}},[t._v("#")]),t._v(" as运算符")]),t._v(" "),a("p",[a("strong",[t._v("as")]),t._v("运算符与强制转换运算符相似，但它遇到转换失败不会抛出异常，而是返回null，语法如下：")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Expr as TargetType // TargetType必须是引用类型，返回的是引用表达式\n")])])]),a("p",[t._v("eg:")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    class Employee : Person { }\n    class Person\n    {\n        public string Name = "Anonymous";\n        public int Age = 25;\n    }\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Employee bill = new Employee();\n            Person p;\n            p = bill as Person;\n            if (p != null) {\n                Console.WriteLine("Person Info: {0}, {1}", p.Name, p.Age); // Person Info: Anonymous 25\n            }\n            \n        }\n    }\n')])])]),a("p",[t._v("注意，as运算符只能用于引用转换和装箱转换，不能用于用户自定义转换或到值类型转换")]),t._v(" "),a("h2",{attrs:{id:"十七-泛型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#十七-泛型","aria-hidden":"true"}},[t._v("#")]),t._v(" 十七.泛型")]),t._v(" "),a("h3",{attrs:{id:"什么是泛型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是泛型","aria-hidden":"true"}},[t._v("#")]),t._v(" 什么是泛型")]),t._v(" "),a("p",[t._v("通过"),a("strong",[t._v("泛型")]),t._v("，我们可以重构代码并且增加一个抽象层，使之应用到它们编码的数据类型上或其他类型。这是专门为多段代码在不同的数据类型上执行相同指令的情况专门设计的")]),t._v(" "),a("h3",{attrs:{id:"c-中的泛型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#c-中的泛型","aria-hidden":"true"}},[t._v("#")]),t._v(" C#中的泛型")]),t._v(" "),a("p",[a("strong",[t._v("泛型")]),t._v("特性提供了一种更优雅的方式让多个类型共享一组代码。泛型允许我们声明"),a("strong",[t._v("类型参数化")]),t._v("的代码，可以用不同的类型进行实例化。注意，"),a("strong",[t._v("类型不是对象而是对象的模板，泛型类型也不是类型而是类型的模板")])]),t._v(" "),a("p",[t._v("C#提供了"),a("strong",[t._v("5种")]),t._v("泛型：类、结构、接口、委托和方法（前4个是类型，方法是成员）")]),t._v(" "),a("p",[t._v("eg: 创建一个泛型类")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    class MyStack <T> // 在类型后放置 <T>\n    {\n        int StackPointer = 0;\n        T [] StackArray;\n        public void Push(T x) {...}\n        public Pop() {...}\n    }\n")])])]),a("h3",{attrs:{id:"泛型类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#泛型类","aria-hidden":"true"}},[t._v("#")]),t._v(" 泛型类")]),t._v(" "),a("p",[t._v("创建和使用常规的、非泛型的类有两个步骤：声明类和创建类型实例；但"),a("strong",[t._v("泛型类")]),t._v("不是实际的类而是类的模板，所以使用上有些差别：先构建实际的类类型、再创建这个构建后的类类型的实例")]),t._v(" "),a("ul",[a("li",[t._v("在某些类型上使用占位符来声明一个类")]),t._v(" "),a("li",[t._v("为占位符提供真实类型，该类型称为"),a("strong",[t._v("构造类型")])]),t._v(" "),a("li",[t._v("创建构造类型的实例")])]),t._v(" "),a("p",[a("img",{attrs:{src:e(377),alt:""}})]),t._v(" "),a("h3",{attrs:{id:"声明泛型类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#声明泛型类","aria-hidden":"true"}},[t._v("#")]),t._v(" 声明泛型类")]),t._v(" "),a("p",[t._v("声明一个泛型类：")]),t._v(" "),a("ul",[a("li",[t._v("在类名后放置一组尖括号(区分泛型类和普通类的标志)")]),t._v(" "),a("li",[t._v("在尖括号中用逗号分隔的占位符字符串表示希望提供的类型，这叫做"),a("strong",[t._v("类型参数")])]),t._v(" "),a("li",[t._v("在泛型类声明的主体中使用类型参数来表示应该替代的类型")])]),t._v(" "),a("p",[t._v("eg:")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    class SomClass <T1, T2>\n    {\n        public T1 SomeVar = new T1();\n        public T2 OtherVar = new T2();\n    }\n")])])]),a("h3",{attrs:{id:"创建构造类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建构造类型","aria-hidden":"true"}},[t._v("#")]),t._v(" 创建构造类型")]),t._v(" "),a("p",[t._v("创建构造类型的语法：列出类名并在尖括号中提供真实类型来替代类型参数，替代类型参数的真实类型叫做"),a("strong",[t._v("类型实参")])]),t._v(" "),a("p",[a("img",{attrs:{src:e(378),alt:""}})]),t._v(" "),a("h3",{attrs:{id:"创建变量和实例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建变量和实例","aria-hidden":"true"}},[t._v("#")]),t._v(" 创建变量和实例")]),t._v(" "),a("p",[a("strong",[t._v("类对象的创建")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    // 普通非泛型类型对象的创建\n    MyNonGenClass myNGC = new MyNonGenClass();\n    // 泛型类型对象的创建\n    SomeClass<short, int> mySc1 = new SomeClass<short, int>();\n    // 或者使用 var，让编译器使用类型引用\n    var mySc2 = new SomeClass<short, int>();\n")])])]),a("p",[a("img",{attrs:{src:e(379),alt:""}})]),t._v(" "),a("p",[t._v("使用泛型的栈的栗子：")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    class MyStack<T>\n    {\n        T[] StackArray;\n        int StackPointer = 0;\n        public void Push(T x)\n        {\n            if (!IsStackFull)\n                StackArray[StackPointer++] = x;\n        }\n        public T Pop()\n        {\n            return (!IsStackEmpty) ? StackArray[--StackPointer] : StackArray[0];\n        }\n        const int MaxStack = 10;\n        bool IsStackFull\n        {\n            get\n            {\n                return StackPointer >= MaxStack;\n            }\n        }\n        bool IsStackEmpty\n        {\n            get\n            {\n                return StackPointer <= 0;\n            }\n        }\n        public MyStack()\n        {\n            StackArray = new T[MaxStack];\n        }\n        public void Print()\n        {\n            for (int i = StackPointer - 1; i >= 0; i--)\n                Console.WriteLine(" Value: {0}", StackArray[i]);\n        }\n    }\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            MyStack<int> StackInt = new MyStack<int>();\n            MyStack<string> StackString = new MyStack<string>();\n\n            StackInt.Push(3);\n            StackInt.Push(5);\n            StackInt.Push(7);\n            StackInt.Push(9);\n            StackInt.Print();\n\n            StackString.Push("This is fun");\n            StackString.Push("Hi here");\n            StackString.Print();\n            // Value: 9\n            // Value: 7\n            // Value: 5\n            // Value: 3\n            // Value: Hi here\n            // Value: This is fun\n        }    \n    }\n')])])]),a("p",[t._v("比较：")]),t._v(" "),a("p",[a("img",{attrs:{src:e(380),alt:""}})]),t._v(" "),a("h3",{attrs:{id:"类型参数的约束"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型参数的约束","aria-hidden":"true"}},[t._v("#")]),t._v(" 类型参数的约束")]),t._v(" "),a("p",[t._v("从泛型栈的示例可以看出，它没有尝试添加、比较或做其他任何需要用到项本身的运算符的事情，因为泛型栈不知道它要保存的项的类型是什么，不会知道这些类型实现的成员。但所有的C#对象最终都从"),a("code",[t._v("object")]),t._v("类继承，栈可以确定的是，它保存的项都实现了"),a("code",[t._v("object")]),t._v("的成员，包括"),a("code",[t._v("ToString")]),t._v("、"),a("code",[t._v("Equals")]),t._v("和"),a("code",[t._v("GetType")]),t._v("等等")]),t._v(" "),a("p",[t._v("只要代码不访问它处理的一些类型的对象（或者它始终是"),a("code",[t._v("object")]),t._v("的成员），泛型类就能处理任何类型。符合约束的类型参数叫做"),a("strong",[t._v("未绑定的类型参数")]),t._v("，如果代码尝试使用其他成员，编译器会产生一个错误")]),t._v(" "),a("p",[t._v("eg:")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    class Simple<T>\n    {\n        static public bool LessThan(T i1, T i2)\n        {\n            return i1 < i2; // 错误 不是所有的类都实现了小于运算符\n        }\n    }\n")])])]),a("p",[t._v("要让泛型更有用，需要提供额外的信息让编译器知道参数可以接受哪些类型，这些额外的信息叫做"),a("strong",[t._v("约束")]),t._v("。只有符合约束的类型才能替代给定的类型参数，来产生构造类型")]),t._v(" "),a("p",[t._v("约束使用"),a("strong",[t._v("where")]),t._v("子句列出：")]),t._v(" "),a("ul",[a("li",[t._v("每一个约束的类型参数有自己的where子句")]),t._v(" "),a("li",[t._v("如果形参有多个约束，它们在where子句中使用逗号分隔")])]),t._v(" "),a("p",[t._v("eg:")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    where TypeParam : constraint, contraint, ... \n                             ↑约束列表\n")])])]),a("p",[t._v("where子句需要注意：")]),t._v(" "),a("ul",[a("li",[t._v("子句在类型参数列表的关闭尖括号后列出")]),t._v(" "),a("li",[t._v("子句不使用逗号或其他符号分隔")]),t._v(" "),a("li",[t._v("子句可以以任何次序列出")]),t._v(" "),a("li",[t._v("子句中的约束必须有特定顺序\n"),a("ul",[a("li",[t._v("最多只能有一个主约束，如果有则必须放在第一位")]),t._v(" "),a("li",[t._v("可以有任意多的接口约束")]),t._v(" "),a("li",[t._v("如果有构造函数约束，必须放在最后")])])])]),t._v(" "),a("p",[t._v("eg:")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    class MyClass <T1, T2, T3>\n        where T2: Customer\n        where T3: IComparable\n    {\n        ...\n    }\n")])])]),a("p",[t._v("有"),a("strong",[t._v("5种")]),t._v("类型的约束")]),t._v(" "),a("p",[a("img",{attrs:{src:e(381),alt:""}})]),t._v(" "),a("p",[t._v("它们的顺序：")]),t._v(" "),a("p",[a("img",{attrs:{src:e(382),alt:""}})]),t._v(" "),a("h3",{attrs:{id:"泛型方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#泛型方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 泛型方法")]),t._v(" "),a("p",[a("strong",[t._v("泛型方法")]),t._v("可以在泛型和非泛型类以及结构和接口中声明")]),t._v(" "),a("p",[a("strong",[t._v("声明泛型方法")]),t._v("：具有类型参数列表和可选的约束")]),t._v(" "),a("ul",[a("li",[t._v("泛型方法有两个参数列表\n"),a("ul",[a("li",[t._v("封闭在圆括号内的方法参数列表")]),t._v(" "),a("li",[t._v("封闭在尖括号内的类型参数列表")])])]),t._v(" "),a("li",[t._v("在方法名称后和方法参数列表之前放置类型参数列表")]),t._v(" "),a("li",[t._v("在方法参数列表后放置可选的约束子句")])]),t._v(" "),a("p",[t._v("eg:")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("                            ↓类型参数列表     ↓约束子句\n    public void PrintData<S, T> (S p, T t) where S: Person\n    {                              ↑方法参数列表\n        ...                        \n    }\n")])])]),a("p",[a("strong",[t._v("调用类型参数列表")]),t._v("：需要在调用方法时提供"),a("strong",[t._v("类型实参")])]),t._v(" "),a("p",[t._v("eg:")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    void DoStuff <T1, T2> (T1 t1, T2 t2)\n    {\n        T1 someVar = t1;\n        T2 otherVar = t2;\n    }\n    DoStuff <short, int> (sVal, iVal);\n    DoStuff <int, long> (iVal, lVal);\n")])])]),a("p",[t._v("当传入方法参数时，编译器可以通过方法参数推断出泛型方法的类型形参的类型，因此可以省略类型参数和调用中的尖括号")]),t._v(" "),a("p",[t._v("eg:")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    int myInt = 5;\n    MyMethod <int> (myInt);\n    =\n    MyMethod(myInt);\n")])])]),a("p",[t._v("eg：在一个非泛型类中声明一个泛型方法")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    class MyMethod\n    {\n        static public void ReverseAndPrint<T> (T[] arr)\n        {\n            Array.Reverse(arr);\n            foreach (T item in arr)\n                Console.Write("{0}, ", item.ToString());\n            Console.WriteLine("");\n        }\n    }\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // 创建各种类型的数组\n            var intArray = new int[] { 3, 5, 7, 9, 11 };\n            var stringArray = new string[] { "first", "second", "third" };\n            var doubleArray = new double[] { 3.567, 7.891, 2.345 };\n\n            MyMethod.ReverseAndPrint<int>(intArray); // 11, 9, 7, 5, 3,\n            MyMethod.ReverseAndPrint<string>(stringArray); // third, second, first,\n            MyMethod.ReverseAndPrint<double>(doubleArray); // 2.345, 7.891, 3.567,\n\n            MyMethod.ReverseAndPrint(intArray); // 3, 5, 7, 9, 11,\n            MyMethod.ReverseAndPrint(stringArray); // first, second, third,\n            MyMethod.ReverseAndPrint(doubleArray); // 3.567, 7.891, 2.345,\n        }\n    }\n')])])]),a("h3",{attrs:{id:"扩展方法和泛型类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#扩展方法和泛型类","aria-hidden":"true"}},[t._v("#")]),t._v(" 扩展方法和泛型类")]),t._v(" "),a("p",[t._v("扩展方法与泛型类结合使用，允许将类中静态方法关联到不同的泛型类上，还允许像调用类构造方法一样来调用方法")]),t._v(" "),a("p",[a("strong",[t._v("泛型类的扩展方法")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("必须声明为"),a("code",[t._v("static")])]),t._v(" "),a("li",[t._v("必须是静态类的成员")]),t._v(" "),a("li",[t._v("第一个参数类型中必须有关键字"),a("code",[t._v("this")]),t._v(",后面是扩展的泛型类的名字")])]),t._v(" "),a("p",[t._v("eg:一个叫做Print的扩展方法，扩展了叫做"),a("code",[t._v("Holder<T>")]),t._v("的泛型类")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    static class ExtendHolder\n    {\n        public static void Print<T>(this Holder<T> h)\n        {\n            T[] vals = h.GetValues();\n            Console.WriteLine("{0},\\t{1},\\t{2}", vals[0], vals[1], vals[2]);\n        }\n    }\n    class Holder<T>\n    {\n        T[] Vals = new T[3];\n        public Holder (T v0, T v1, T v2)\n        {\n            Vals[0] = v0;\n            Vals[1] = v1;\n            Vals[2] = v2;\n        }\n        public T[] GetValues()\n        {\n            return Vals;\n        }\n    }\n    class Program \n    {\n        static void Main(string[] args)\n            {\n            var intHolder = new Holder<int>(3, 5, 7);\n            var stringHolder = new Holder<string>("a1", "a2", "a3");\n            intHolder.Print(); // 3  5  7\n            stringHolder.Print();// a1  a2  a3\n            }\n    }\n')])])]),a("h3",{attrs:{id:"泛型结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#泛型结构","aria-hidden":"true"}},[t._v("#")]),t._v(" 泛型结构")]),t._v(" "),a("p",[t._v("与泛型类相似，"),a("strong",[t._v("泛型结构")]),t._v("可以有类型参数和约束")]),t._v(" "),a("p",[t._v("eg:")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    struct PieceOfData<T>\n    {\n        public PieceOfData(T value)\n        {\n            _data = value;\n        }\n        private T _data;\n        public T Data\n        {\n            get\n            {\n                return _data;\n            }\n            set\n            {\n                _data = value;\n            }\n        }\n    }\n    class Program\n    {\n        static void Main(string[] args)\n            {\n            var intData = new PieceOfData<int>(10);\n            var stringData = new PieceOfData<string>("Hi here");\n            Console.WriteLine("intData = {0}", intData.Data);\n            Console.WriteLine("stringData = {0}", stringData.Data);\n            }\n    }\n')])])]),a("h3",{attrs:{id:"泛型委托"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#泛型委托","aria-hidden":"true"}},[t._v("#")]),t._v(" 泛型委托")]),t._v(" "),a("p",[a("strong",[t._v("声明泛型委托")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("在委托名后、委托参数列表之前的尖括号中放置类型参数列表")]),t._v(" "),a("li",[t._v("有两个参数列表：委托形参列表和类型参数列表")]),t._v(" "),a("li",[t._v("类型参数列表的范围包括：\n"),a("ul",[a("li",[t._v("返回值")]),t._v(" "),a("li",[t._v("形参列表")]),t._v(" "),a("li",[t._v("约束子句")])])])]),t._v(" "),a("p",[t._v("eg:")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("                             ↓类型参数列表  \n    delegate  R  MyDelegate<T, R>(T value);\n              ↑返回类型             ↑委托形参\n")])])]),a("p",[t._v("eg: 在Main中，泛型委托MyDelegate使用string类型的实参实例化，并且用PrintString方法初始化")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    delegate void MyDelegate<T>(T value); // 泛型委托\n    class SimplePrint\n    {\n        static public void PrintString(string s) // 方法匹配委托\n        {\n            Console.WriteLine(s);\n        }\n        static public void PrintUpperString(string s) // 方法匹配委托\n        {\n            Console.WriteLine("{0}", s.ToUpper());\n        }\n    }\n    class Program\n    {\n        static void Main(string[] args)\n            {\n            var myDel = new MyDelegate<string>(SimplePrint.PrintString); // 创建委托的实例\n            myDel += SimplePrint.PrintUpperString; // 向委托添加方法\n            myDel("Hi here");\n            // Hi here\n            // HI HERE\n            }\n    }\n')])])]),a("h3",{attrs:{id:"泛型接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#泛型接口","aria-hidden":"true"}},[t._v("#")]),t._v(" 泛型接口")]),t._v(" "),a("p",[t._v("泛型接口允许我们编写参数和接口成员返回类型是泛型类型参数的接口，泛型接口的声明与非泛型接口相似，只是多了尖括号和类型参数")]),t._v(" "),a("p",[t._v("eg:")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    interface IMyIfc<T> // 泛型接口\n    {\n        T ReturnIt(T inValue);\n    }\n    class SimpleDervied<S>: IMyIfc<S> // 泛型类\n    {\n        public S ReturnIt(S inValue)\n        {\n            return inValue;\n        }\n    }\n    class Program\n    {\n        static void Main()\n        {\n            var trivInt = new SimpleDervied<int>();\n            var trivString = new SimpleDervied<string>();\n            Console.WriteLine("{0}", trivInt.ReturnIt(5));\n            Console.WriteLine("{0}", trivString.ReturnIt("Hi here"));\n        }\n    }\n')])])]),a("p",[a("strong",[t._v("泛型接口的实现必须唯一")]),t._v("，必须保证类型实参组合不会在类型中产生两个重复接口")]),t._v(" "),a("p",[t._v("eg: 错误示例")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    interface IMyIfc<T> // 泛型接口\n    {\n        T ReturnIt(T inValue);\n    }\n    class SimpleDervied<S>: IMyIfc<int>, IMyIfc<S> // 错误\n    {\n        public int ReturnIt(int inValue) // 实现第一个接口\n        {\n            return inValue;\n        }\n        public S ReturnIt(S inValue) // 实现第二个接口\n        {                            // 如果把int作为类型参数来替代第二个接口中的S，则会有两个相同类型的接口，这是不允许的\n            return inValue;\n        }\n    }\n")])])]),a("h3",{attrs:{id:"协变"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#协变","aria-hidden":"true"}},[t._v("#")]),t._v(" 协变")]),t._v(" "),a("p",[a("strong",[t._v("可变性")]),t._v("：协变、逆变、不变")]),t._v(" "),a("p",[a("strong",[t._v("赋值兼容性")]),t._v("：将派生类对象的实例赋值给基类的变量")]),t._v(" "),a("p",[t._v("eg: 将派生类Dog的对象，赋值给基类Animal类型的变量")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    class Animal\n    {\n        public int NumberOfLegs = 4;\n    }\n    class Dog: Animal\n    {\n    }\n    class Program\n    {\n        static void Main()\n        {\n            Animal a1 = new Animal();\n            Animal a2 = new Dog();\n            Console.WriteLine("Number of dog legs: {0}", a2.NumberOfLegs);\n        }\n    }\n')])])]),a("p",[a("img",{attrs:{src:e(383),alt:""}})]),t._v(" "),a("p",[t._v("eg:示例2")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    class Animal\n    {\n        public int NumberOfLegs = 4;\n    }\n    class Dog: Animal\n    {\n    }\n    delegate T Factory<T>();\n    class Program\n    {\n        static DogS MakeDog()\n        {\n            return new DogS();\n        }\n        static void Main(string[] args)\n            {\n            Factory<DogS> dogMaker = MakeDog; // 创建委托对象\n            Factory<AnimalS> animalMaker = dogMaker; // 尝试赋值委托对象 报错\n            Console.WriteLine(animalMaker().NumberOfLegs.ToString());\n            }\n    }\n")])])]),a("p",[a("strong",[t._v("报错分析")]),t._v("：看上去由派生类构造的委托应该可以赋值给由基类构造的委托，为什么会报错呢？赋值兼容性不成立了吗？")]),t._v(" "),a("p",[t._v("不是，这个原则还是成立的，在这里不生效的原因是：尽管DogS是AnimalS的派生类，但委托"),a("code",[t._v("Factory<DogS>")]),t._v("没有从"),a("code",[t._v("Factory<AniamlS>")]),t._v("派生，这两个委托是同级的，之间没有派生关系，所以赋值兼容性不适用")]),t._v(" "),a("p",[t._v("如果"),a("strong",[t._v("派生类")]),t._v("只是用于"),a("strong",[t._v("输出值")]),t._v("，那么这种结构化的委托有效性之间的常数关系叫做"),a("strong",[t._v("协变")]),t._v("，使用"),a("code",[t._v("out")]),t._v("关键字标记委托声明中的类型参数，就能让编译器知道这个是我们的期望，就能解决报错了")]),t._v(" "),a("p",[t._v("更改为"),a("code",[t._v("delegate T Factory<out T>();")])]),t._v(" "),a("p",[a("img",{attrs:{src:e(384),alt:""}})]),t._v(" "),a("h3",{attrs:{id:"逆变"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#逆变","aria-hidden":"true"}},[t._v("#")]),t._v(" 逆变")]),t._v(" "),a("p",[t._v("eg:")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    class Program\n    {\n        delegate void Action1<in T>(T a);\n        static void ActOnAnimal(AnimalS a)\n        {\n            Console.WriteLine(a.NumberOfLegs);\n        }\n        static void Main(string[] args)\n            {\n            Action1<AnimalS> act1 = ActOnAnimal;\n            Action1<DogS> dog1 = act1;\n            dog1(new DogS());\n            }\n    }\n")])])]),a("p",[t._v("如果类型参数只用作委托中方法的"),a("strong",[t._v("输入参数")]),t._v("，即使调用代码传入了一个更高程度的派生类的引用，委托中的方法也只期望一个程度低一些的派生类的引用.")]),t._v(" "),a("p",[t._v("这种在期望传入基类时允许传入派生类对象的特性叫做"),a("strong",[t._v("协变")]),t._v("，逆变允许更高程度的派生类作为输入参数")]),t._v(" "),a("p",[a("img",{attrs:{src:e(385),alt:""}})]),t._v(" "),a("p",[a("strong",[t._v("比较协变和逆变")])]),t._v(" "),a("p",[a("img",{attrs:{src:e(386),alt:""}})]),t._v(" "),a("p",[a("strong",[t._v("接口的协变和逆变")]),t._v("：可以在声明接口时使用"),a("code",[t._v("out")]),t._v("和"),a("code",[t._v("in")]),t._v("关键字")]),t._v(" "),a("p",[t._v("eg:")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    class AnimalS\n    {\n        public string Name;\n    }\n    class DogS : AnimalS\n    {\n    }\n\n    interface IMyIfcS<out T> // 声明泛型接口 out关键字制定了类型参数时协变的\n    {\n        T GetFirst();\n    }\n    class SimpleReturn<Y>: IMyIfcS<Y>\n    {\n        public Y[]  items =  new Y[2];\n        public Y GetFirst() // 泛型类实现了泛型接口\n        {\n            return items[0];\n        }\n    }\n    class Program\n    {\n        static void DoSomething(IMyIfcS<AnimalS> returner) // 方法接受由AnimalS类型构建的泛型接口IMyIfcS作为参数\n        {\n            Console.WriteLine(returner.GetFirst().Name);\n        }\n        static void Main(string[] args)\n        {\n            SimpleReturn<DogS> dogReturner = new SimpleReturn<DogS>();\n            dogReturner.items[0] = new DogS() { Name = "Avonlea" }; // 使用DogS类创建并初始化了泛型类SimpleReturn的示例\n            IMyIfcS<AnimalS> animalReturner = dogReturner; // 因为使用了out 所以成立\n            DoSomething(dogReturner); // 实现接口的构造协变类调用了DoSomething方法\n        }\n    }\n')])])]),a("p",[t._v("以上栗子都是显式的协变和逆变，有些情况下编译器可以自动识别某个已构建的委托是协变还是逆变，从而进行"),a("strong",[t._v("类型的强制转换")]),t._v("，这通常发生在没有为对象的类型赋值的时候：")]),t._v(" "),a("p",[t._v("eg:")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    class AnimalS\n    {\n        public string Name;\n    }\n    class DogS : AnimalS\n    {\n    }\n    class Program\n    {\n        delegate T Factory<T>();\n        static DogS MakeDog()\n        {\n            return new DogS()\n        }\n        static void Main()\n        {\n\n            Factory<AnimalS> animalMaker = MakeDog; // 隐式强制转换 不需要out\n\n            Factory<DogS> dogMaker = MakeDog;\n            Factory<AnimalS> animalMaker = dogMaker; // 已为对象的类型赋值 需要out \n\n            Factory<AnimalS> animalMaker = new Factory<DogS> (MakeDog) // 需要out\n        }\n    }\n\n")])])]),a("p",[a("strong",[t._v("总结")])]),t._v(" "),a("ul",[a("li",[t._v("变化处理的是使用派生类替换基类的安全情况，即只适用引用类型，所以不适用于从值类型派生其他类型")]),t._v(" "),a("li",[t._v("显式变化使用"),a("code",[t._v("in")]),t._v("和"),a("code",[t._v("out")]),t._v("关键字只适用于委托和接口，不适用于类、结构和方法")]),t._v(" "),a("li",[t._v("不包括"),a("code",[t._v("in")]),t._v("和"),a("code",[t._v("out")]),t._v("关键字的委托和接口类型参数叫做"),a("strong",[t._v("不变")]),t._v("，这些类型参数不能同于协变和逆变")])]),t._v(" "),a("h2",{attrs:{id:"十八-枚举器和迭代器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#十八-枚举器和迭代器","aria-hidden":"true"}},[t._v("#")]),t._v(" 十八.枚举器和迭代器")]),t._v(" "),a("h3",{attrs:{id:"枚举器和可枚举类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#枚举器和可枚举类型","aria-hidden":"true"}},[t._v("#")]),t._v(" 枚举器和可枚举类型")]),t._v(" "),a("p",[t._v("为什么数组可以通过"),a("code",[t._v("foreach")]),t._v("方法列举出每一项的值？原因是数组可以按需提供一个叫做"),a("strong",[t._v("枚举器")]),t._v("的对象。枚举器可以一次返回请求的数组中的元素。对于有枚举器的类型而言，获取一个对象枚举器的方法是调用对象的"),a("code",[t._v("GetEnumerator")]),t._v("方法。实现"),a("code",[t._v("GetEnumerator")]),t._v("方法的类型叫做"),a("strong",[t._v("可枚举类型")])]),t._v(" "),a("p",[a("img",{attrs:{src:e(387),alt:""}})]),t._v(" "),a("p",[a("code",[t._v("foreach")]),t._v("结构设计用来和可枚举类型一起使用。只要给它的遍历对象是可枚举类型，就会执行以下行为：")]),t._v(" "),a("ul",[a("li",[t._v("通过调用"),a("code",[t._v("GetEnumerator")]),t._v("方法获取对象的枚举器")]),t._v(" "),a("li",[t._v("从枚举器中请求每一项并且把它作为"),a("strong",[t._v("迭代变量")]),t._v("，代码可以读取该变量但不可以改变")])]),t._v(" "),a("p",[t._v("eg:")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("                              ↓必须是可枚举变量\n    foreach(Type VarName in EnumerableObject)\n    {\n        ...\n    }\n")])])]),a("h3",{attrs:{id:"ienumerator接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ienumerator接口","aria-hidden":"true"}},[t._v("#")]),t._v(" IEnumerator接口")]),t._v(" "),a("p",[t._v("实现"),a("code",[t._v("IEnumerator")]),t._v("接口的枚举器包含3个函数成员：Current、MoveNext和Reset")]),t._v(" "),a("ul",[a("li",[t._v("Current是返回序列中当前位置项的属性\n"),a("ul",[a("li",[t._v("它是只读属性")]),t._v(" "),a("li",[t._v("它返回object类型的引用，所以可以返回任何类型")])])]),t._v(" "),a("li",[t._v("MoveNext是把枚举器位置前进到集合中下一项的方法，它也返回布尔值，指示新的位置是否有效\n"),a("ul",[a("li",[t._v("如果新的位置有效，则返回true")]),t._v(" "),a("li",[t._v("如果新的位置无效（比如到达了尾部），则返回false")]),t._v(" "),a("li",[t._v("枚举器的原始位置为-1，因此MoveNext必须再第一次使用Current前调用")])])]),t._v(" "),a("li",[t._v("Reset是把位置重置为原始状态的方法")])]),t._v(" "),a("p",[a("img",{attrs:{src:e(388),alt:""}})]),t._v(" "),a("p",[t._v("eg: 模仿 foreach 实现遍历数组")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    static void Main() {\n        int[] MyArray = { 10, 11, 12, 14, 15 };\n        IEnumerator ie = MyArray.GetEnumerator();\n        while (ie.MoveNext())\n        {\n            int i = (int) ie.Current;\n            Console.WriteLine("{0}", i);\n        }\n    }\n')])])]),a("h3",{attrs:{id:"ienumerable接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ienumerable接口","aria-hidden":"true"}},[t._v("#")]),t._v(" IEnumerable接口")]),t._v(" "),a("h3",{attrs:{id:"泛型枚举接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#泛型枚举接口","aria-hidden":"true"}},[t._v("#")]),t._v(" 泛型枚举接口")]),t._v(" "),a("h3",{attrs:{id:"迭代器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#迭代器","aria-hidden":"true"}},[t._v("#")]),t._v(" 迭代器")]),t._v(" "),a("h3",{attrs:{id:"常见迭代器模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常见迭代器模式","aria-hidden":"true"}},[t._v("#")]),t._v(" 常见迭代器模式")]),t._v(" "),a("h3",{attrs:{id:"产生多个可枚举类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#产生多个可枚举类型","aria-hidden":"true"}},[t._v("#")]),t._v(" 产生多个可枚举类型")]),t._v(" "),a("h3",{attrs:{id:"将迭代器作为属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#将迭代器作为属性","aria-hidden":"true"}},[t._v("#")]),t._v(" 将迭代器作为属性")]),t._v(" "),a("h3",{attrs:{id:"迭代器的实质"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#迭代器的实质","aria-hidden":"true"}},[t._v("#")]),t._v(" 迭代器的实质")])])},[],!1,null,null,null);n.default=s.exports}}]);