(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{511:function(t,n,e){t.exports=e.p+"assets/img/Fac.b86112ba.png"},600:function(t,n,e){"use strict";e.r(n);var a=e(38),r=Object(a.a)({},function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"unity"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#unity","aria-hidden":"true"}},[t._v("#")]),t._v(" Unity")]),t._v(" "),a("h2",{attrs:{id:"十六-unity开发环境"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#十六-unity开发环境","aria-hidden":"true"}},[t._v("#")]),t._v(" 十六 Unity开发环境")]),t._v(" "),a("p",[a("strong",[t._v("六大面板")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("场景面板(Scene):  提供三维场景内容的导航，允许你选择、移动、旋转或缩放场景中的对象")]),t._v(" "),a("li",[t._v("游戏面板(Game):   可以在游戏面板中查看游戏运行时的实际画面")]),t._v(" "),a("li",[t._v("层级面板(Hierarchy):  展示当前场景中包含的每个游戏对象")]),t._v(" "),a("li",[t._v("项目面板(Project):  展示项目中所有的资源(Assets)，每一项资源都是构成项目的一个任何类型的文件")]),t._v(" "),a("li",[t._v("检视面板(Inspector):  当在项目面板选中一项资源时，或在场景面板或层级面板选中一个游戏对象时，可以在检视面板中查看或编辑它的信息")]),t._v(" "),a("li",[t._v("控制台面板(Console):  查看Unity软件给出的关于错误或代码Bug的信息")])]),t._v(" "),a("h2",{attrs:{id:"十九-变量和组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#十九-变量和组件","aria-hidden":"true"}},[t._v("#")]),t._v(" 十九.变量和组件")]),t._v(" "),a("h3",{attrs:{id:"unity中的重要变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#unity中的重要变量","aria-hidden":"true"}},[t._v("#")]),t._v(" Unity中的重要变量")]),t._v(" "),a("p",[a("strong",[t._v("三维向量(Vector3)")]),t._v("：三个浮点数的集合，存储对象的三维空间位置")]),t._v(" "),a("p",[t._v("eg:三维向量的实例变量和函数")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("  Vector3 position = new Vector3(0.0f, 3.0f, 4.0f); //设置 x, y, z 的值\n  print(position.x);\n  print(position.y);\n  print(position.z);\n  print(position.magnitude); // 5.0 三维向量到坐标原点0，0，0的距离长度\n  position.Normalize(); // 设置position变量的 Magnitude属性为1 position的x,y,z变成(0.0, 0.6, 0.8)\n")])])]),a("p",[t._v("eg:三维向量的静态变量和函数")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("  print(Vector3.zero); // (0,0,0) 是 new Vector3(0,0,0)的简写\n  print(Vector3.one); // (1,1,1) 是 new Vector3(1,1,1)\n  print(Vector3.right); // (1,0,0) 是new Vector3(1,0,0)的简写\n  print(Vector3.up); // (0,1,0) 是new Vector3(0,1,0)的简写\n  print(Vector3.forward); // (0,0,1) 是new Vector3(0,0,1) 的简写\n  Vector3.Cross(v3a, v3b); // 计算两个Vector3的向量积\n  Vector3.Dot(v3a, v3b); // 计算两个Vector3的标量积\n")])])]),a("p",[a("strong",[t._v("颜色(Color)")]),t._v("：带有透明度信息的颜色")]),t._v(" "),a("ul",[a("li",[t._v("由红、绿、蓝三种颜色加透明度(Alpha)组成，电脑屏幕的颜色通过加色法叠加而成")]),t._v(" "),a("li",[t._v("成分存储为一个0.0f到1.0f之间的浮点数，其中0.0f表示该颜色通道亮度为0，而1.0f表示该颜色通道亮度为最高")]),t._v(" "),a("li",[t._v("定义颜色有两种方式，一种是三个参数(红，绿，蓝)，另一种是(红，绿，蓝，Alpha)")])]),t._v(" "),a("p",[t._v("eg:颜色的实例变量和函数")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("print(Color.yellow.r); // 1 颜色的红色通道值\nprint(Color.yellow.g); // 0.92f 颜色的绿色通道值\nprint(Color.yellow.b); // 0.016f 颜色的蓝色通道值\nprint(Color.yellow.a); // 1 颜色的alpha通道值\n")])])]),a("p",[t._v("eg:颜色的静态变量和函数")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// 三原色\nColor.red = new Color(1,0,0,1); // 纯红色\nColor.green = new Color(0,1,0,1); // 纯绿色\nColor.bloe = new Color(0,0,1,1); //纯蓝色\n// 合成色\nColor.cyan = new Color(0,1,1,1); //青色 亮蓝绿色\nColor.magnta = new Color(1,0,1,1); // 品红 粉紫色\nColor.yellow = new Color(1, 0.92f, 0.016f, 1) // 黄色 Unity定义的\nColor.black = new COlor(0,0,0,1); // 黑色\nColor.white = new Color(1,1,1,1); // 白色\nColor.grey = new Color(0.5f, 0.5f, 0.5f, 1); // 灰色\nColor.clear = new COlor(0,0,0,0); // 完全透明\n")])])]),a("p",[a("strong",[t._v("四元数(Quaternion)")]),t._v("：旋转信息。通常会通过GameObject.transform.rotation设置和调整对象的旋转。四元数定义旋转的方式可以避免发生万向节死锁")]),t._v(" "),a("p",[t._v("eg:定义一个四元数")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("  Quaternion lookUp45Deg = Quaternion.Euler(-45f, 0f, 0f);\n  // 传入Quaternion.Euler()函数的三个浮点数是沿x、y和z轴旋转的角度\n")])])]),a("p",[t._v("eg:四元数的实例变量和函数")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("print(lookUp45Deg.eulerAngles); // (-45,0,0) 欧拉角\n")])])]),a("p",[a("strong",[t._v("数学运算(Mathf)")]),t._v("：一个数学函数库")]),t._v(" "),a("ul",[a("li",[t._v("Mathf附带的所有变量和函数都是静态的，不能创建Mathf的实例")])]),t._v(" "),a("p",[t._v("eg:Mathf的(部分)静态变量和函数")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Mathf.Sin(x); // 计算x的正弦值\nMathf.Cos(x); // 计算x的余弦值\nMathf.Atan2(y, x); // 计算沿z轴旋转的角度，使原来朝向x轴正方向的对象转而朝向点(x, y)\nprint(Mathf.PI); // 3.141593 圆周率\nMathf.Min(2, 3, 1); // 1 取三个数中的最小值\nMathf.Max(2, 3, 1); // 3 取三个数中的最大值\nMathf.Round(1.75f); // 2 四舍五入到最接近的整数\nMathf.Ceil(1.75f); // 2 向上舍入到最接近的整数\nMathf.Floor(1.75f); // 1 向下舍入到最接近的整数\nMathf.Abs(-25); // 25 -25的绝对值\n")])])]),a("p",[a("strong",[t._v("屏幕(Screen)")]),t._v("：关于屏幕显示的信息，提供关于Unity游戏所使用的特定计算机屏幕的信息，与设备无关")]),t._v(" "),a("p",[t._v("eg:屏幕的静态变量和函数")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("print(Screen.width); // 以像素为单位输出屏幕的宽度\nprint(Screen.height); // 以像素为单位输出屏幕的高度\nScreen.showCursor = false; // 隐藏光标\n")])])]),a("p",[a("strong",[t._v("系统信息(SystemInfo)")]),t._v("：关于设备的信息，包括操作系统、处理器、显示硬件等设备信息")]),t._v(" "),a("p",[t._v("eg:系统信息的静态变量和函数")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("print(SystemInfo.operatingSystem); // 输出操作系统名称\n")])])]),a("p",[a("strong",[t._v("游戏对象(GameObject)")]),t._v("：场景中任意对象的类型，GameObject是Unity场景中所有实体的基类，在Unity游戏屏幕上看到的所有东西都是游戏对象类的子类，GameObject可以包含任意数量的不同组件")]),t._v(" "),a("p",[t._v("eg:")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('GameObject gObj = new GameObject("MyGO"); // 创建一个名为MyGO的游戏对象\nprint(gObj.name); // 输出MyGO 游戏对象gObj的名称\nTransform trans = gObj.GetComponent<Transform>(); // 定义变量trans为gObj的变换组件\nTransform trans2 = gObj.transform; // 访问同一个变换组件的另一快捷方式\ngObj.SetActive(false); // 让gObj失去焦点，变为不可见，使其不可运行代码\n')])])]),a("p",[t._v("注意："),a("code",[t._v("gObj.GetComponent<Transform>()")]),t._v("可以用来访问游戏对象所绑定的组件，可用于多种不同的数据类型")]),t._v(" "),a("p",[t._v("eg:")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Renderer rend = gObj.GetComponent<Renderer>(); // 获取渲染器组件\nColloder coll = gObj.GetComponent<Colloder>(); // 获取碰撞器组件\nHelloWorld hwInstance = gObj.GetComponent<HelloWorld>(); // 如果gObj上绑定了一个HelloWorld的实例，可以通过这个方法返回这个实例\n")])])]),a("h3",{attrs:{id:"unity游戏对象和组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#unity游戏对象和组件","aria-hidden":"true"}},[t._v("#")]),t._v(" Unity游戏对象和组件")]),t._v(" "),a("p",[t._v("Unity中所有显示在屏幕上的元素都是游戏对象，并且所有游戏对象都由"),a("strong",[t._v("组件")]),t._v("构成")]),t._v(" "),a("p",[a("strong",[t._v("Transform 变换组件")]),t._v("：是所有游戏中必然存在的组件，控制着游戏对象的定位、旋转和缩放，它还负责层级面板中的父/子关系，若一个对象是另一个对象的子对象，它就像附着在父对象一样，随父对象同步移动")]),t._v(" "),a("p",[a("strong",[t._v("MeshFilter 网格过滤器")]),t._v("：将项目面板中的MeshFilter绑定到游戏对象上。要使模型显示在屏幕上，游戏对象必须有一个网格过滤器(用于处理实际的三位网格数据)和一个网格渲染器(用于将网格与着色器或材质相关联，在屏幕上显示图形)。网格过滤器为游戏对象创建一个皮肤或表面，网格渲染器决定该表面的形状、颜色和纹理")]),t._v(" "),a("p",[a("strong",[t._v("Renderer 渲染器")]),t._v("：允许你从屏幕上查看到场景和游戏面板中的游戏对象。网格渲染器要求网格过滤器提供三维网格数据，将网格过滤器、材质和光照组合在一起，将游戏对象呈现在屏幕上\nl\n"),a("strong",[t._v("Colllder 碰撞器")]),t._v("：使游戏对象在游戏世界中产生物理存在，可与其他对象发生碰撞。Unity中有四种类型的碰撞器组件：")]),t._v(" "),a("ul",[a("li",[t._v("球状碰撞器：运算速度最快的形状，为球体")]),t._v(" "),a("li",[t._v("胶囊碰撞器：两端为球体，中间为圆柱体，运算速度次之")]),t._v(" "),a("li",[t._v("盒状碰撞器：一种长方体，适用于箱子、汽车、人体躯干等")]),t._v(" "),a("li",[t._v("网格碰撞器：由三维网格构成的碰撞器，比较实用和精确，但运算速度最慢，并且只有凸多面体属性设置为true的网格碰撞器才可以与其他网格碰撞器发生碰撞")])]),t._v(" "),a("p",[a("strong",[t._v("Rigidbody 刚体组件")]),t._v("：控制着游戏对象的物理模拟(要使碰撞器随游戏对象移动，游戏对象必须有刚体组件)")]),t._v(" "),a("p",[a("strong",[t._v("Script 脚本组件")]),t._v("：所有的C#脚本都是游戏对象的组件")]),t._v(" "),a("h2",{attrs:{id:"二十三-函数与参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二十三-函数与参数","aria-hidden":"true"}},[t._v("#")]),t._v(" 二十三.函数与参数")]),t._v(" "),a("p",[a("strong",[t._v("Unity不允许直接修改变换组件的position.x值")])]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    void AlignX(GameObject go0, GameObject go1, GameObject go2)\n    {\n        float avgX = go0.transform.position.x;\n        avgX += go1.transform.position.x;\n        avgX += go2.transform.position.x;\n        avgX = avgX / 3.0f;\n        setAvg(go0, avgX);\n        setAvg(go1, avgX);\n        setAvg(go2, avgX);\n    }\n\n    void setAvg(GameObject go, float avg)\n    {\n        Vector3 vt = go.transform.position;\n        vt.x = avg;\n        go.transform.position = vt;\n    }\n")])])]),a("p",[a("strong",[t._v("可选参数")])]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    void Awake()\n    {\n      SetX(this.gameObject, 25); // 因为浮点数可以存储任何整数值，所以把整数值传给浮点型变量不会有问题\n      SetX(this.gameObject); // transform.position.x = 0\n    }\n    void SetX(GameObject go, float eX = 0.0f) // eX变量设置了默认值，编译器会自动把它当作可选参数\n    {\n        Vector3 vt = go.transform.position;\n        vt.x = eX;\n        go.transform.position = vt;\n    }\n")])])]),a("p",[a("strong",[t._v("params 关键字")])]),t._v(" "),a("p",[t._v("使用"),a("code",[t._v("params")]),t._v("关键字可以让函数接收任意数量的同类型参数，这些参数会被转化成该类型的数组")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    int Add(params int[] ints)\n    {\n        int sum = 0;\n        foreach(int i in ints)\n        {\n            sum += i;\n        }\n        return sum;\n    }\n")])])]),a("p",[a("strong",[t._v("递归函数")])]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    int Fac(int n)\n    {\n        if(n < 0)\n        {\n            return (0);\n        }\n        if (n == 0)\n        {\n            return (1);\n        }\n        int result = n * Fac(n - 1);\n        return result;\n    }\n    void Awake()\n    {\n      Fac(5);\n    }\n")])])]),a("p",[a("img",{attrs:{src:e(511),alt:""}})]),t._v(" "),a("h2",{attrs:{id:"二十四-代码调试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二十四-代码调试","aria-hidden":"true"}},[t._v("#")]),t._v(" 二十四.代码调试")]),t._v(" "),a("p",[a("strong",[t._v("编译时错误")]),t._v("：是Unity在对C#代码进行编译（编译是指对C#代码进行解析并将其转换为通用中间语言，然后将通用中间语言转换为计算机上运行的机器语言）时发现的错误")])])},[],!1,null,null,null);n.default=r.exports}}]);