(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{517:function(t,s,a){"use strict";a.r(s);var n=a(38),r=Object(n.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"算法分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算法分类","aria-hidden":"true"}},[t._v("#")]),t._v(" 算法分类")]),t._v(" "),a("h2",{attrs:{id:"递归"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#递归","aria-hidden":"true"}},[t._v("#")]),t._v(" 递归")]),t._v(" "),a("h3",{attrs:{id:"递归算法概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#递归算法概念","aria-hidden":"true"}},[t._v("#")]),t._v(" 递归算法概念")]),t._v(" "),a("p",[t._v("递归是一种解决问题的方法、它从解决问题的各个小部分的开始，直到解决最初的大问题。递归通常涉及函数调用自身。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("recursiveFunction")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("someParam")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("recusiveFunction")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("someParam"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("假设现在必须要执行 recursiveFunction，结果是什么？单就上述情况而言，它会一直执行下去。因此，每个递归函数都必须有"),a("u",[t._v("基线条件，")]),t._v("即一个不再递归调用的条件（停止点），以防止无限递归。\n编程名言：“要理解递归，首先要理解递归”。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("understandRecursion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("doIunderstandRecursion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" recursionAnswer "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("confirm")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Do you understand recursion?'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("recursionAnswer "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 基线条件或停止点")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("understandRecursion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("recursionAnswer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 递归调用")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"递归实战"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#递归实战","aria-hidden":"true"}},[t._v("#")]),t._v(" 递归实战")]),t._v(" "),a("h4",{attrs:{id:"计算一个数的阶乘"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#计算一个数的阶乘","aria-hidden":"true"}},[t._v("#")]),t._v(" 计算一个数的阶乘")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("什么情况使用递归")])]),t._v(" "),a("li",[a("p",[t._v("如何写递归代码")]),t._v(" "),a("ul",[a("li",[t._v("单分支层层递归实例讲解")]),t._v(" "),a("li",[t._v("多分支并列递归实例讲解")])])]),t._v(" "),a("li",[a("p",[t._v("递归注意事项（缺点与解决方法）")]),t._v(" "),a("ul",[a("li",[t._v("爆栈")]),t._v(" "),a("li",[t._v("重复计算")]),t._v(" "),a("li",[t._v("循环引用")]),t._v(" "),a("li",[t._v("空间复杂度")]),t._v(" "),a("li",[t._v("时间复杂度")])])]),t._v(" "),a("li",[a("p",[t._v("递归实战")]),t._v(" "),a("ul",[a("li",[t._v("JavaScript 调用栈")]),t._v(" "),a("li",[t._v("走台阶问题")]),t._v(" "),a("li",[t._v("找到最佳推荐人")]),t._v(" "),a("li",[t._v("数组拍平")]),t._v(" "),a("li",[t._v("对象格式化")]),t._v(" "),a("li",[t._v("实现一颗树组件")]),t._v(" "),a("li",[t._v("实现一个深拷贝\n"),a("ul",[a("li",[t._v("weakMap 扩展知识")])])])])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://juejin.im/post/5d85cda3f265da03b638e918?utm_source=gold_browser_extension#heading-0",target:"_blank",rel:"noopener noreferrer"}},[t._v("聊聊面试必考-递归思想与实战"),a("OutboundLink")],1),t._v(" —— 系统介绍递归的问题，从理论到实战")])])])])},[],!1,null,null,null);s.default=r.exports}}]);